/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Meeting, Peer, WaitlistedParticipant } from "./types/rtk-client";
import { Chat, ChatChannel, Notification, PartialStateEvent, Poll, PollObject, Size, States, Transcript } from "./types/props";
import { UIConfig } from "./types/ui-config";
import { IconPack } from "./lib/icons";
import { RtkI18n } from "./lib/lang";
import { AIView } from "./components/rtk-ai/rtk-ai";
import { ControlBarVariant } from "./components/rtk-controlbar-button/rtk-controlbar-button";
import { IconPack as IconPack1, RtkI18n as RtkI18n1, Size as Size1, States as States1, UIConfig as UIConfig1 } from "./exports";
import { AudioVisualizerVariant } from "./components/rtk-audio-visualizer/rtk-audio-visualizer";
import { AvatarVariant } from "./components/rtk-avatar/rtk-avatar";
import { DraftMeeting } from "./utils/breakout-rooms-manager";
import { ButtonKind, ButtonVariant } from "./components/rtk-button/rtk-button";
import { FileMessage, ImageMessage, Message, RTKBasicParticipant, RTKPermissionsPreset, RTKPlugin, TextMessage } from "@cloudflare/realtimekit";
import { ChatFilter } from "./components/rtk-chat/rtk-chat";
import { RtkNewMessageEvent } from "./components/rtk-chat-composer-ui/rtk-chat-composer-ui";
import { NewMessageEvent } from "./components/rtk-chat-composer-view/rtk-chat-composer-view";
import { ChatGroup, ChatGroupChangedType } from "./components/rtk-chat-selector-ui/rtk-chat-selector-ui";
import { ControlBarVariant as ControlBarVariant1 } from "./components/rtk-controlbar-button/rtk-controlbar-button";
import { GridLayout, GridSize } from "./components/rtk-grid/rtk-grid";
import { GridPaginationVariants } from "./components/rtk-grid-pagination/rtk-grid-pagination";
import { IconVariant } from "./components/rtk-icon/rtk-icon";
import { ModalDataConfig } from "./components/rtk-join-stage/rtk-join-stage";
import { MeetingMode } from "./components/rtk-meeting/rtk-meeting";
import { GridLayout as GridLayout1, GridSize as GridSize1 } from "./components/rtk-grid/rtk-grid";
import { Placement } from "./types/floating-ui";
import { MessageAction } from "./components/rtk-message-view/rtk-message-view";
import { RtkNameTagVariant } from "./components/rtk-name-tag/rtk-name-tag";
import { VNode } from "@stencil/core";
import { DataNode } from "./components/rtk-paginated-list/rtk-paginated-list";
import { ParticipantViewMode } from "./components/rtk-participant/rtk-participant";
import { ParticipantsTabId } from "./components/rtk-participants/rtk-participants";
import { ParticipantsViewMode } from "./components/rtk-participants/rtk-participants";
import { RtkSidebarTab, RtkSidebarView } from "./components/rtk-sidebar-ui/rtk-sidebar-ui";
import { RtkSidebarSection } from "./components/rtk-sidebar/rtk-sidebar";
import { RtkSidebarTab as RtkSidebarTab1, RtkSidebarView as RtkSidebarView1 } from "./components/rtk-sidebar-ui/rtk-sidebar-ui";
import { Tab } from "./components/rtk-tab-bar/rtk-tab-bar";
import { TooltipKind, TooltipVariant } from "./components/rtk-tooltip/rtk-tooltip";
import { MeetingMode as MeetingMode1 } from "./components/rtk-meeting/rtk-meeting";
import { ViewerCountVariant } from "./components/rtk-viewer-count/rtk-viewer-count";
import { Peer as Peer1 } from ".";
export { Meeting, Peer, WaitlistedParticipant } from "./types/rtk-client";
export { Chat, ChatChannel, Notification, PartialStateEvent, Poll, PollObject, Size, States, Transcript } from "./types/props";
export { UIConfig } from "./types/ui-config";
export { IconPack } from "./lib/icons";
export { RtkI18n } from "./lib/lang";
export { AIView } from "./components/rtk-ai/rtk-ai";
export { ControlBarVariant } from "./components/rtk-controlbar-button/rtk-controlbar-button";
export { IconPack as IconPack1, RtkI18n as RtkI18n1, Size as Size1, States as States1, UIConfig as UIConfig1 } from "./exports";
export { AudioVisualizerVariant } from "./components/rtk-audio-visualizer/rtk-audio-visualizer";
export { AvatarVariant } from "./components/rtk-avatar/rtk-avatar";
export { DraftMeeting } from "./utils/breakout-rooms-manager";
export { ButtonKind, ButtonVariant } from "./components/rtk-button/rtk-button";
export { FileMessage, ImageMessage, Message, RTKBasicParticipant, RTKPermissionsPreset, RTKPlugin, TextMessage } from "@cloudflare/realtimekit";
export { ChatFilter } from "./components/rtk-chat/rtk-chat";
export { RtkNewMessageEvent } from "./components/rtk-chat-composer-ui/rtk-chat-composer-ui";
export { NewMessageEvent } from "./components/rtk-chat-composer-view/rtk-chat-composer-view";
export { ChatGroup, ChatGroupChangedType } from "./components/rtk-chat-selector-ui/rtk-chat-selector-ui";
export { ControlBarVariant as ControlBarVariant1 } from "./components/rtk-controlbar-button/rtk-controlbar-button";
export { GridLayout, GridSize } from "./components/rtk-grid/rtk-grid";
export { GridPaginationVariants } from "./components/rtk-grid-pagination/rtk-grid-pagination";
export { IconVariant } from "./components/rtk-icon/rtk-icon";
export { ModalDataConfig } from "./components/rtk-join-stage/rtk-join-stage";
export { MeetingMode } from "./components/rtk-meeting/rtk-meeting";
export { GridLayout as GridLayout1, GridSize as GridSize1 } from "./components/rtk-grid/rtk-grid";
export { Placement } from "./types/floating-ui";
export { MessageAction } from "./components/rtk-message-view/rtk-message-view";
export { RtkNameTagVariant } from "./components/rtk-name-tag/rtk-name-tag";
export { VNode } from "@stencil/core";
export { DataNode } from "./components/rtk-paginated-list/rtk-paginated-list";
export { ParticipantViewMode } from "./components/rtk-participant/rtk-participant";
export { ParticipantsTabId } from "./components/rtk-participants/rtk-participants";
export { ParticipantsViewMode } from "./components/rtk-participants/rtk-participants";
export { RtkSidebarTab, RtkSidebarView } from "./components/rtk-sidebar-ui/rtk-sidebar-ui";
export { RtkSidebarSection } from "./components/rtk-sidebar/rtk-sidebar";
export { RtkSidebarTab as RtkSidebarTab1, RtkSidebarView as RtkSidebarView1 } from "./components/rtk-sidebar-ui/rtk-sidebar-ui";
export { Tab } from "./components/rtk-tab-bar/rtk-tab-bar";
export { TooltipKind, TooltipVariant } from "./components/rtk-tooltip/rtk-tooltip";
export { MeetingMode as MeetingMode1 } from "./components/rtk-meeting/rtk-meeting";
export { ViewerCountVariant } from "./components/rtk-viewer-count/rtk-viewer-count";
export { Peer as Peer1 } from ".";
export namespace Components {
    interface RtkAi {
        /**
          * Config
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * View type
         */
        "view": AIView;
    }
    interface RtkAiToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface RtkAiTranscriptions {
        /**
          * Initial transcriptions
         */
        "initialTranscriptions": Transcript[];
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    interface RtkAudioGrid {
        /**
          * Config
         */
        "config": UIConfig1;
        /**
          * Whether to hide self in the grid
         */
        "hideSelf": boolean;
        /**
          * Icon Pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * States
         */
        "states": States1;
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    interface RtkAudioTile {
        /**
          * Config
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting
         */
        "meeting": Meeting;
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size": Size;
        /**
          * States
         */
        "states": States1;
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    /**
     * An audio visualizer component which visualizes a participants audio.
     * Commonly used inside `rtk-name-tag`.
     */
    interface RtkAudioVisualizer {
        /**
          * Hide the visualizer if audio is muted
         */
        "hideMuted": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Audio visualizer for screensharing, it will use screenShareTracks.audio instead of audioTrack
         */
        "isScreenShare": boolean;
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": AudioVisualizerVariant;
    }
    /**
     * Avatar component which renders a participant's image or their initials.
     */
    interface RtkAvatar {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Participant object
         */
        "participant": Peer | WaitlistedParticipant | { name: string; picture: string };
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Avatar type
         */
        "variant": AvatarVariant;
    }
    interface RtkBreakoutRoomManager {
        /**
          * allow room delete
         */
        "allowDelete": boolean;
        /**
          * Enable updating participants
         */
        "assigningParticipants": boolean;
        /**
          * display expanded card by default
         */
        "defaultExpanded": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Drag mode
         */
        "isDragMode": boolean;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Mode in which selector is used
         */
        "mode": 'edit' | 'create';
        /**
          * Connected Room Config Object
         */
        "room": DraftMeeting;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component which lists all participants, with ability to
     * run privileged actions on each participant according to your permissions.
     */
    interface RtkBreakoutRoomParticipants {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Participant ids
         */
        "participantIds": string[];
        /**
          * selected participants
         */
        "selectedParticipantIds": string[];
        /**
          * Language
         */
        "t": RtkI18n;
    }
    interface RtkBreakoutRoomsManager {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A button which toggles visibility of breakout rooms.
     * You need to pass the `meeting` object to it.
     */
    interface RtkBreakoutRoomsToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface RtkBroadcastMessageModal {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * States object
         */
        "states": States1;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A button that follows RTK Design System.
     */
    interface RtkButton {
        /**
          * Where the button is disabled or not
         */
        "disabled": boolean;
        /**
          * Button type
         */
        "kind": ButtonKind;
        /**
          * Whether to reverse order of children
         */
        "reverse": boolean;
        /**
          * Size
         */
        "size": Size;
        /**
          * Button type
         */
        "type": HTMLButtonElement['type'];
        /**
          * Button variant
         */
        "variant": ButtonVariant;
    }
    /**
     * A component which lets to manage your audio devices and audio preferences.
     * Emits `rtkStateUpdate` event with data for muting notification sounds:
     * ```ts
     * {
     *  prefs: {
     *    muteNotificationSounds: boolean
     *  }
     * }
     * ```
     */
    interface RtkCameraSelector {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * variant
         */
        "variant": 'full' | 'inline';
    }
    /**
     * A button which toggles your camera.
     */
    interface RtkCameraToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface RtkCaptionToggle {
        /**
          * Config
         */
        "config": UIConfig1;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * States object
         */
        "states": States1;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface RtkChannelCreator {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    interface RtkChannelDetails {
        /**
          * Channel object
         */
        "channel": ChatChannel;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * List of channel members
         */
        "members": RTKBasicParticipant[];
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    interface RtkChannelHeader {
        /**
          * Channel object
         */
        "channel": ChatChannel;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Show back button
         */
        "showBackButton": boolean;
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    interface RtkChannelSelectorUi {
        /**
          * Channels
         */
        "channels": ChatChannel[];
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Selected channel id
         */
        "selectedChannelId": string;
        /**
          * show recent message in channel
         */
        "showRecentMessage": boolean;
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    interface RtkChannelSelectorView {
        /**
          * Channels
         */
        "channels": {
    id: string;
    name: string;
    avatarUrl?: string;
    icon?: keyof IconPack1;
    latestMessage?: string;
    latestMessageTime?: Date;
    unreadCount?: number;
  }[];
        /**
          * Disables search bar (default = false)
         */
        "disableSearch": boolean;
        /**
          * Hides avatar (default = false)
         */
        "hideAvatar": boolean;
        /**
          * Icon Pack
         */
        "iconPack": IconPack1;
        /**
          * Selected channel id
         */
        "selectedChannelId": string;
        /**
          * Language
         */
        "t": RtkI18n1;
        /**
          * Render as dropdown or list (default = list)
         */
        "viewAs": 'dropdown' | 'list';
    }
    /**
     * Fully featured chat component with image & file upload, emoji picker and auto-scroll.
     */
    interface RtkChat {
        /**
          * Config
         */
        "config": UIConfig1;
        /**
          * disables private chat
         */
        "disablePrivateChat": boolean;
        /**
          * @deprecated Beta API, will change in future A filter function for messages to be displayed
         */
        "displayFilter": ChatFilter;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * @deprecated Beta API, will change in future List of target presets allowed as private chat recipient
         */
        "privatePresetFilter": String[];
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    interface RtkChatComposerUi {
        /**
          * Whether user can send file messages
         */
        "canSendFiles": boolean;
        /**
          * Whether user can send text messages
         */
        "canSendTextMessage": boolean;
        /**
          * channel id
         */
        "channelId"?: string;
        /**
          * Whether to show emoji picker
         */
        "disableEmojiPicker"?: boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * list of members that can be mentioned
         */
        "members"?: RTKBasicParticipant[];
        /**
          * prefill the composer
         */
        "prefill": {
    suggestedReplies?: string[];
    editMessage?: TextMessage;
    replyMessage?: TextMessage;
  };
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component which renders a chat composer
     */
    interface RtkChatComposerView {
        /**
          * Whether user can send file messages
         */
        "canSendFiles": boolean;
        /**
          * Whether user can send text messages
         */
        "canSendTextMessage": boolean;
        /**
          * Whether to show emoji picker
         */
        "disableEmojiPicker"?: boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Placeholder for text input
         */
        "inputTextPlaceholder": string;
        /**
          * Sets composer to edit mode
         */
        "isEditing": boolean;
        /**
          * Max length for text input
         */
        "maxLength": number;
        /**
          * Message to be pre-populated
         */
        "message": string;
        /**
          * Quote message to be displayed
         */
        "quotedMessage": string;
        /**
          * Rate limits
         */
        "rateLimits": { period: number; maxInvocations: number; };
        /**
          * Key for storing message in localStorage
         */
        "storageKey": string;
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    interface RtkChatMessage {
        /**
          * aligns message to right
         */
        "alignRight": boolean;
        /**
          * can delete message
         */
        "canDelete": boolean;
        /**
          * can edit message
         */
        "canEdit": boolean;
        /**
          * can pin this message
         */
        "canPin": boolean;
        /**
          * can quote reply this message
         */
        "canReply": boolean;
        /**
          * Child
         */
        "child": HTMLElement;
        /**
          * disables controls
         */
        "disableControls": boolean;
        /**
          * hides avatar
         */
        "hideAvatar": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * is continued
         */
        "isContinued": boolean;
        /**
          * if sender is self
         */
        "isSelf": boolean;
        /**
          * is unread
         */
        "isUnread": boolean;
        /**
          * Whether to left align the chat bubbles
         */
        "leftAlign": boolean;
        /**
          * message item
         */
        "message": Message;
        /**
          * sender display picture url
         */
        "senderDisplayPicture": string;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    interface RtkChatMessagesUi {
        /**
          * Can current user pin/unpin messages
         */
        "canPinMessages": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Chat Messages
         */
        "messages": Chat[];
        /**
          * Selected group key
         */
        "selectedGroup": string;
        /**
          * User ID of self user
         */
        "selfUserId": string;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    interface RtkChatMessagesUiPaginated {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Whether to align chat bubbles to the left
         */
        "leftAlign": boolean;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Selected channel
         */
        "selectedChannel"?: ChatChannel;
        /**
          * Selected channel id
         */
        "selectedChannelId"?: string;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    interface RtkChatSearchResults {
        /**
          * Channel id
         */
        "channelId": string;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Search query
         */
        "query": string;
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    interface RtkChatSelectorUi {
        /**
          * Participants
         */
        "groups": ChatGroup[];
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Selected participant
         */
        "selectedGroupId": string;
        /**
          * Self User ID
         */
        "selfUserId": string;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Unread counts
         */
        "unreadCounts": Record<string, number>;
    }
    /**
     * A button which toggles visibility of chat.
     * You need to pass the `meeting` object to it to see the unread messages count badge.
     * When clicked it emits a `rtkStateUpdate` event with the data:
     * ```ts
     * { activeSidebar: boolean; sidebar: 'chat' }
     * ```
     */
    interface RtkChatToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    /**
     * Shows the time elapsed in a meeting.
     */
    interface RtkClock {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
    }
    /**
     * A confirmation modal.
     */
    interface RtkConfirmationModal {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * Controlbar component provides you with various designs as variants.
     */
    interface RtkControlbar {
        /**
          * Config
         */
        "config": UIConfig1;
        /**
          * Whether to render the default UI
         */
        "disableRender": boolean;
        /**
          * Icon Pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": 'solid' | 'boxed';
    }
    /**
     * A skeleton component used for composing custom controlbar buttons.
     */
    interface RtkControlbarButton {
        /**
          * Whether icon requires brand color
         */
        "brandIcon": boolean;
        /**
          * Whether button is disabled
         */
        "disabled": boolean;
        /**
          * Icon
         */
        "icon": string;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Loading state Ignores current icon and shows a spinner if true
         */
        "isLoading": boolean;
        /**
          * Label of button
         */
        "label": string;
        /**
          * Whether to show warning icon
         */
        "showWarning": boolean;
        /**
          * Size
         */
        "size": Size;
        /**
          * Variant
         */
        "variant": ControlBarVariant1;
    }
    /**
     * A number picker with increment and decrement buttons.
     */
    interface RtkCounter {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Minimum value
         */
        "minValue": number;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Initial value
         */
        "value": number;
    }
    /**
     * A troubleshooting component to identify and fix any issues in the meeting.
     */
    interface RtkDebugger {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    interface RtkDebuggerAudio {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * States object
         */
        "states": States1;
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    interface RtkDebuggerScreenshare {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * States object
         */
        "states": States1;
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    interface RtkDebuggerSystem {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * States object
         */
        "states": States1;
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    interface RtkDebuggerToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface RtkDebuggerVideo {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * States object
         */
        "states": States1;
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    /**
     * A dialog component.
     */
    interface RtkDialog {
        /**
          * UI Config
         */
        "config": UIConfig;
        /**
          * Whether Escape key can close the modal
         */
        "disableEscapeKey": boolean;
        /**
          * Whether to show the close button
         */
        "hideCloseButton": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Whether a dialog is open or not
         */
        "open": boolean;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component which handles all dialog elements in a component such as:
     * - rtk-settings
     * - rtk-leave-meeting
     * - rtk-permissions-message
     * - rtk-image-viewer
     * - rtk-breakout-rooms-manager
     * This components depends on the values from `states` object.
     */
    interface RtkDialogManager {
        /**
          * UI Config
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component which renders the draft attachment to send
     */
    interface RtkDraftAttachmentView {
        /**
          * Attachment to display
         */
        "attachment": {
    type: 'image' | 'file';
    file: File;
  };
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    /**
     * A very simple emoji picker component.
     */
    interface RtkEmojiPicker {
        /**
          * Controls whether or not to focus on mount
         */
        "focusWhenOpened": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    interface RtkEmojiPickerButton {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Active state indicator
         */
        "isActive": boolean;
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    /**
     * A screen which shows a meeting has ended.
     */
    interface RtkEndedScreen {
        /**
          * Config object
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Global states
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Global states
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    interface RtkFileDropzone {
        /**
          * Host element on which drop events to attach
         */
        "hostEl": HTMLElement;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    /**
     * A component which renders a file message from chat.
     */
    interface RtkFileMessage {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Whether the message is continued by same user
         */
        "isContinued": boolean;
        /**
          * Text message object
         */
        "message": FileMessage;
        /**
          * Date object of now, to calculate distance between dates
         */
        "now": Date;
        /**
          * show message in bubble
         */
        "showBubble": boolean;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component which renders a file message.
     */
    interface RtkFileMessageView {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Name of the file
         */
        "name": string;
        /**
          * Size of the file
         */
        "size": number;
        /**
          * Url of the file
         */
        "url": string;
    }
    interface RtkFilePickerButton {
        /**
          * File type filter to open file picker with
         */
        "filter": string;
        /**
          * Icon
         */
        "icon": keyof IconPack1;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Label for tooltip
         */
        "label": string;
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    /**
     * A button which toggles full screen mode for any
     * existing `rtk-meeting` component in the DOM.
     */
    interface RtkFullscreenToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Target Element to fullscreen
         */
        "targetElement": HTMLElement;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    /**
     * The main grid component which abstracts all the grid handling logic and renders it for you.
     */
    interface RtkGrid {
        /**
          * The aspect ratio of each participant
         */
        "aspectRatio": string;
        /**
          * Config object
         */
        "config": UIConfig;
        /**
          * Gap between participants
         */
        "gap": number;
        /**
          * Grid size
         */
        "gridSize": GridSize;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Grid Layout
         */
        "layout": GridLayout;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * @deprecated
         */
        "overrides": any;
        /**
          * Size
         */
        "size": Size;
        /**
          * States
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component which allows you to change current page and view mode
     * of active participants list. This is reflected in the `rtk-grid` component.
     */
    interface RtkGridPagination {
        /**
          * Icon Pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size Prop
         */
        "size": Size;
        /**
          * States
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": GridPaginationVariants;
    }
    /**
     * A component that houses all the header components.
     */
    interface RtkHeader {
        /**
          * Config
         */
        "config": UIConfig1;
        /**
          * Whether to render the default UI
         */
        "disableRender": boolean;
        /**
          * Icon Pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": 'solid' | 'boxed';
    }
    /**
     * An icon component which accepts an svg string and renders it.
     */
    interface RtkIcon {
        /**
          * Icon
         */
        "icon": string;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Icon variant
         */
        "variant": IconVariant;
    }
    /**
     * A screen that handles the idle state,
     * i.e; when you are waiting for data about the meeting, specifically the `meeting` object.
     */
    interface RtkIdleScreen {
        /**
          * Config object
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting
         */
        "meeting": Meeting;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component which renders an image message from chat.
     */
    interface RtkImageMessage {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Whether the message is continued by same user
         */
        "isContinued": boolean;
        /**
          * Text message object
         */
        "message": ImageMessage;
        /**
          * Date object of now, to calculate distance between dates
         */
        "now": Date;
        /**
          * show message in bubble
         */
        "showBubble": boolean;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component which renders an image message.
     */
    interface RtkImageMessageView {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Language
         */
        "t": RtkI18n1;
        /**
          * Url of the image
         */
        "url": string;
    }
    /**
     * A component which shows an image sent via chat.
     */
    interface RtkImageViewer {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Image message
         */
        "image": ImageMessage;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    interface RtkInformationTooltip {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
    }
    interface RtkJoinStage {
        /**
          * UI Config
         */
        "config": UIConfig;
        /**
          * Content Config
         */
        "dataConfig": ModalDataConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A button which toggles visilibility of the leave confirmation dialog.
     */
    interface RtkLeaveButton {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    /**
     * A component which allows you to leave a meeting or
     * end meeting for all, if you have the permission.
     */
    interface RtkLeaveMeeting {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    interface RtkLivestreamIndicator {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    interface RtkLivestreamPlayer {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    interface RtkLivestreamToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    /**
     * A component which loads the logo from your config, or via the `logo-url` attribute.
     */
    interface RtkLogo {
        /**
          * Config object
         */
        "config": UIConfig;
        /**
          * Logo URL
         */
        "logoUrl": string;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    interface RtkMarkdownView {
        /**
          * max length of text to render as markdown
         */
        "maxLength": number;
        /**
          * raw text to render as markdown
         */
        "text": string;
    }
    /**
     * A single component which renders an entire meeting UI.
     * It loads your preset and renders the UI based on it.
     * With this component, you don't have to handle all the states,
     * dialogs and other smaller bits of managing the application.
     */
    interface RtkMeeting {
        /**
          * Whether to apply the design system on the document root from config
         */
        "applyDesignSystem": boolean;
        /**
          * UI Config
         */
        "config": UIConfig;
        /**
          * Grid layout
         */
        "gridLayout": GridLayout1;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Whether participant should leave when this component gets unmounted
         */
        "leaveOnUnmount": boolean;
        /**
          * Whether to load config from preset
         */
        "loadConfigFromPreset": boolean;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Fill type
         */
        "mode": MeetingMode;
        /**
          * Whether to show setup screen or not
         */
        "showSetupScreen": boolean;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * Displays the title of the meeting.
     */
    interface RtkMeetingTitle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A menu component.
     */
    interface RtkMenu {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Offset in px
         */
        "offset": number;
        /**
          * Placement of menu
         */
        "placement": Placement;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A menu item component.
     */
    interface RtkMenuItem {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A menu list component.
     */
    interface RtkMenuList {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component which renders list of messages.
     */
    interface RtkMessageListView {
        /**
          * Estimated height of an item
         */
        "estimateItemSize": number;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Function to load more messages. Messages returned from this will be preprended
         */
        "loadMore": (lastMessage: Message) => Promise<Message[]>;
        /**
          * Messages to render
         */
        "messages": Message[];
        /**
          * Render function of the message
         */
        "renderer": (message: Message, index: number) => HTMLElement;
        /**
          * Maximum visible messages
         */
        "visibleItemsCount": number;
    }
    interface RtkMessageView {
        /**
          * List of actions to show in menu
         */
        "actions": MessageAction[];
        /**
          * Author display label
         */
        "authorName": string;
        /**
          * Avatar image url
         */
        "avatarUrl": string;
        /**
          * Hides author display label
         */
        "hideAuthorName": boolean;
        /**
          * Hides avatar
         */
        "hideAvatar": boolean;
        /**
          * Hides metadata (time)
         */
        "hideMetadata": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Time when message was sent
         */
        "time": Date;
        /**
          * Appearance
         */
        "variant": 'plain' | 'bubble';
        /**
          * Render
         */
        "viewType": 'incoming' | 'outgoing';
    }
    /**
     * A button which toggles your microphone.
     */
    interface RtkMicToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    /**
     * A component which lets to manage your audio devices and audio preferences.
     * Emits `rtkStateUpdate` event with data for muting notification sounds:
     * ```ts
     * {
     *  prefs: {
     *    muteNotificationSounds: boolean
     *  }
     * }
     * ```
     */
    interface RtkMicrophoneSelector {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * variant
         */
        "variant": 'full' | 'inline';
    }
    /**
     * A grid component which handles screenshares, plugins and participants.
     */
    interface RtkMixedGrid {
        /**
          * Aspect Ratio of participant tile  Format: `width:height`
         */
        "aspectRatio": string;
        /**
          * UI Config
         */
        "config": UIConfig;
        /**
          * Gap between participant tiles
         */
        "gap": number;
        /**
          * Grid size
         */
        "gridSize": GridSize1;
        /**
          * Icon Pack
         */
        "iconPack": IconPack;
        /**
          * Grid Layout
         */
        "layout": GridLayout1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Participants
         */
        "participants": Peer[];
        /**
          * Pinned Participants
         */
        "pinnedParticipants": Peer[];
        /**
          * Active Plugins
         */
        "plugins": RTKPlugin[];
        /**
          * Screenshare Participants
         */
        "screenShareParticipants": Peer[];
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A button which toggles visibility of a more menu.
     * When clicked it emits a `rtkStateUpdate` event with the data:
     * ```ts
     * { activeMoreMenu: boolean; }
     * ```
     */
    interface RtkMoreToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    interface RtkMuteAllButton {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface RtkMuteAllConfirmation {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component which shows a participant's name.
     */
    interface RtkNameTag {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Whether it is used in a screen share view
         */
        "isScreenShare": boolean;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Name tag variant
         */
        "variant": RtkNameTagVariant;
    }
    interface RtkNetworkIndicator {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Is for screenshare
         */
        "isScreenShare": boolean;
        /**
          * Meeting
         */
        "meeting": Meeting;
        /**
          * Participant or Self
         */
        "participant": Peer;
        /**
          * Language
         */
        "t": RtkI18n1;
    }
    /**
     * A component which shows a notification.
     * You need to remove the element after you receive the
     * `rtkNotificationDismiss` event.
     */
    interface RtkNotification {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Message
         */
        "notification": Notification;
        /**
          * Stops timeout when true
         */
        "paused": boolean;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component which handles notifications.
     * You can configure which notifications you want to see and which ones you want to hear.
     * There are also certain limits which you can set as well.
     */
    interface RtkNotifications {
        /**
          * Config object
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A confirmation modal.
     */
    interface RtkOverlayModal {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    interface RtkPaginatedList {
        /**
          * auto scroll list to bottom
         */
        "autoScroll": boolean;
        /**
          * Create nodes
         */
        "createNodes": (data: unknown[]) => VNode[];
        /**
          * label to show when empty
         */
        "emptyListLabel": string;
        /**
          * Fetch the data
         */
        "fetchData": (timestamp: number, size: number, reversed: boolean) => Promise<unknown[]>;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * On a new node created
         */
        "onNewNode": (node: DataNode) => Promise<void>;
        /**
          * On node deleted
         */
        "onNodeDelete": (key: string) => Promise<void>;
        /**
          * On node updated
         */
        "onNodeUpdate": (key: string, newItem: DataNode) => Promise<void>;
        /**
          * Page Size
         */
        "pageSize": number;
        /**
          * Number of pages allowed to be shown
         */
        "pagesAllowed": number;
        /**
          * Item id
         */
        "selectedItemId"?: string;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A participant entry component used inside `rtk-participants` which shows data like:
     * name, picture and media device status.
     * You can perform privileged actions on the participant too.
     */
    interface RtkParticipant {
        /**
          * Config object
         */
        "config": UIConfig1;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * States
         */
        "states": States1;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Show participant summary
         */
        "view": ParticipantViewMode;
    }
    /**
     * A component which shows count of total joined participants in a meeting.
     */
    interface RtkParticipantCount {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    interface RtkParticipantSetup {
        /**
          * Config object
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Whether tile is used for preview
         */
        "isPreview": boolean;
        /**
          * Position of name tag
         */
        "nameTagPosition": | 'bottom-left'
    | 'bottom-right'
    | 'bottom-center'
    | 'top-left'
    | 'top-right'
    | 'top-center';
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": 'solid' | 'gradient';
    }
    /**
     * A component which plays a participants video and allows for placement
     * of components like `rtk-name-tag`, `rtk-audio-visualizer` or any other component.
     */
    interface RtkParticipantTile {
        /**
          * Config object
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Whether tile is used for preview
         */
        "isPreview": boolean;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Position of name tag
         */
        "nameTagPosition": | 'bottom-left'
    | 'bottom-right'
    | 'bottom-center'
    | 'top-left'
    | 'top-right'
    | 'top-center';
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": 'solid' | 'gradient';
    }
    /**
     * A component which lists all participants, with ability to
     * run privileged actions on each participant according to your permissions.
     */
    interface RtkParticipants {
        /**
          * Config
         */
        "config": UIConfig;
        /**
          * Default section
         */
        "defaultParticipantsTabId": ParticipantsTabId;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component which plays all the audio from participants and screenshares.
     */
    interface RtkParticipantsAudio {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Pass existing audio element
         */
        "preloadedAudioElem": HTMLAudioElement;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component which lists all participants, with ability to
     * run privileged actions on each participant according to your permissions.
     */
    interface RtkParticipantsStageList {
        /**
          * Config
         */
        "config": UIConfig;
        /**
          * Hide Stage Participants Count Header
         */
        "hideHeader": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Search
         */
        "search": string;
        /**
          * Size
         */
        "size": Size;
        /**
          * Meeting object
         */
        "states": States1;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * View mode for participants list
         */
        "view": ParticipantsViewMode;
    }
    interface RtkParticipantsStageQueue {
        /**
          * Config
         */
        "config": UIConfig1;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": RtkI18n1;
        /**
          * View mode for participants list
         */
        "view": ParticipantsViewMode;
    }
    /**
     * A button which toggles visibility of participants.
     * When clicked it emits a `rtkStateUpdate` event with the data:
     * ```ts
     * { activeSidebar: boolean; sidebar: 'participants' }
     * ```
     */
    interface RtkParticipantsToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    interface RtkParticipantsViewerList {
        /**
          * Config
         */
        "config": UIConfig1;
        /**
          * Hide Viewer Count Header
         */
        "hideHeader": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Search
         */
        "search": string;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": RtkI18n1;
        /**
          * View mode for participants list
         */
        "view": ParticipantsViewMode;
    }
    interface RtkParticipantsWaitingList {
        /**
          * Config
         */
        "config": UIConfig1;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": RtkI18n1;
        /**
          * View mode for participants list
         */
        "view": ParticipantsViewMode;
    }
    /**
     * A component which shows permission related troubleshooting
     * information.
     */
    interface RtkPermissionsMessage {
        /**
          * Icon Pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    interface RtkPipToggle {
        /**
          * Config
         */
        "config": UIConfig1;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * States object
         */
        "states": States1;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    /**
     * A component which loads a plugin.
     */
    interface RtkPluginMain {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting
         */
        "meeting": Meeting;
        /**
          * Plugin
         */
        "plugin": RTKPlugin;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component which lists all available plugins from their preset,
     * and ability to enable or disable plugins.
     */
    interface RtkPlugins {
        /**
          * Config
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A button which toggles visibility of plugins.
     * When clicked it emits a `rtkStateUpdate` event with the data:
     * ```ts
     * { activeSidebar: boolean; sidebar: 'plugins' }
     * ```
     */
    interface RtkPluginsToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    /**
     * A poll component.
     * Shows a poll where a user can vote.
     */
    interface RtkPoll {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Permissions Object
         */
        "permissions": RTKPermissionsPreset;
        /**
          * Poll
         */
        "poll": Poll;
        /**
          * Self ID
         */
        "self": string;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component that lets you create a poll.
     */
    interface RtkPollForm {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component which lists all available plugins a user can access with
     * the ability to enable or disable them as per their permissions.
     */
    interface RtkPolls {
        /**
          * Config
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A button which toggles visibility of polls.
     * You need to pass the `meeting` object to it to see the unread polls count badge.
     * When clicked it emits a `rtkStateUpdate` event with the data:
     * ```ts
     * { activeSidebar: boolean; sidebar: 'polls' }
     * ```
     */
    interface RtkPollsToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    /**
     * A component which indicates the recording status of a meeting.
     * It will not render anything if no recording is taking place.
     */
    interface RtkRecordingIndicator {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A button which toggles recording state of a meeting.
     * Only a privileged user can perform this action,
     * thus the button will not be visible for participants
     * who don't have the permission to record a meeting.
     */
    interface RtkRecordingToggle {
        /**
          * Disable the button
         */
        "disabled": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    /**
     * A button which toggles your screenshare.
     */
    interface RtkScreenShareToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    /**
     * A component which plays a participant's screenshared video.
     * It also allows for placement of other components similar to `rtk-participant-tile`.
     * This component will not render anything if the participant hasn't start screensharing.
     */
    interface RtkScreenshareView {
        /**
          * Hide full screen button
         */
        "hideFullScreenButton": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Position of name tag
         */
        "nameTagPosition": | 'bottom-left'
    | 'bottom-right'
    | 'bottom-center'
    | 'top-left'
    | 'top-right'
    | 'top-center';
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size": Size;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": 'solid' | 'gradient';
    }
    /**
     * A settings component to see and change your audio/video devices
     * as well as see your connection quality.
     */
    interface RtkSettings {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component which lets to manage your audio devices and audio preferences.
     * Emits `rtkStateUpdate` event with data for muting notification sounds:
     * ```ts
     * {
     *  prefs: {
     *    muteNotificationSounds: boolean
     *  }
     * }
     * ```
     */
    interface RtkSettingsAudio {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A button which toggles visibility of settings module.
     * When clicked it emits a `rtkStateUpdate` event with the data:
     * ```ts
     * { activeSettings: boolean; }
     * ```
     */
    interface RtkSettingsToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    /**
     * A component which lets to manage your camera devices and your video preferences.
     * Emits `rtkStateUpdate` event with data for toggling mirroring of self video:
     * ```ts
     * {
     *  prefs: {
     *    mirrorVideo: boolean
     *  }
     * }
     * ```
     */
    interface RtkSettingsVideo {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A screen shown before joining the meeting, where you can edit your display name,
     * and media settings.
     */
    interface RtkSetupScreen {
        /**
          * Config object
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component which handles the sidebar and
     * you can customize which sections you want, and which section you want as the default.
     */
    interface RtkSidebar {
        /**
          * Config
         */
        "config": UIConfig;
        /**
          * Default section
         */
        "defaultSection": RtkSidebarSection;
        /**
          * Enabled sections in sidebar
         */
        "enabledSections": RtkSidebarTab[];
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * View type
         */
        "view": RtkSidebarView;
    }
    interface RtkSidebarUi {
        /**
          * Default tab to open
         */
        "currentTab": string;
        /**
          * Option to focus close button when opened
         */
        "focusCloseButton": boolean;
        /**
          * Hide Close Action
         */
        "hideCloseAction": boolean;
        /**
          * Hide Main Header
         */
        "hideHeader": boolean;
        /**
          * Icon Pack
         */
        "iconPack": { people: string; people_checked: string; chat: string; poll: string; participants: string; rocket: string; call_end: string; share: string; mic_on: string; mic_off: string; video_on: string; video_off: string; share_screen_start: string; share_screen_stop: string; share_screen_person: string; clock: string; dismiss: string; send: string; search: string; more_vertical: string; chevron_down: string; chevron_up: string; chevron_left: string; chevron_right: string; settings: string; wifi: string; speaker: string; speaker_off: string; download: string; full_screen_maximize: string; full_screen_minimize: string; copy: string; attach: string; image: string; emoji_multiple: string; image_off: string; disconnected: string; wand: string; recording: string; subtract: string; stop_recording: string; warning: string; pin: string; pin_off: string; spinner: string; breakout_rooms: string; add: string; shuffle: string; edit: string; delete: string; back: string; save: string; web: string; checkmark: string; spotlight: string; join_stage: string; leave_stage: string; pip_off: string; pip_on: string; signal_1: string; signal_2: string; signal_3: string; signal_4: string; signal_5: string; start_livestream: string; stop_livestream: string; viewers: string; debug: string; info: string; devices: string; horizontal_dots: string; ai_sparkle: string; meeting_ai: string; create_channel: string; create_channel_illustration: string; captionsOn: string; captionsOff: string; play: string; pause: string; fastForward: string; minimize: string; maximize: string; };
        /**
          * Language
         */
        "t": RtkI18n1;
        /**
          * Tabs
         */
        "tabs": RtkSidebarTab1[];
        /**
          * View
         */
        "view": RtkSidebarView1;
    }
    /**
     * A grid component which renders only the participants in a simple grid.
     */
    interface RtkSimpleGrid {
        /**
          * Aspect Ratio of participant tile  Format: `width:height`
         */
        "aspectRatio": string;
        /**
          * UI Config
         */
        "config": UIConfig;
        /**
          * Gap between participant tiles
         */
        "gap": number;
        /**
          * Icon Pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Participants
         */
        "participants": Peer[];
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component which lets to manage your audio devices and audio preferences.
     * Emits `rtkStateUpdate` event with data for muting notification sounds:
     * ```ts
     * {
     *  prefs: {
     *    muteNotificationSounds: boolean
     *  }
     * }
     * ```
     */
    interface RtkSpeakerSelector {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * variant
         */
        "variant": 'full' | 'inline';
    }
    /**
     * A component which shows an animating spinner.
     */
    interface RtkSpinner {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Size
         */
        "size": Size1;
    }
    /**
     * A grid component that renders two lists of participants: `pinnedParticipants` and `participants`.
     * You can customize the layout to a `column` view, by default is is `row`.
     * - Participants from `pinnedParticipants[]` are rendered inside a larger grid.
     * - Participants from `participants[]` array are rendered in a smaller grid.
     */
    interface RtkSpotlightGrid {
        /**
          * Aspect Ratio of participant tile  Format: `width:height`
         */
        "aspectRatio": string;
        /**
          * UI Config
         */
        "config": UIConfig;
        /**
          * Gap between participant tiles
         */
        "gap": number;
        /**
          * Grid size
         */
        "gridSize": GridSize1;
        /**
          * Icon Pack
         */
        "iconPack": IconPack;
        /**
          * Grid Layout
         */
        "layout": GridLayout1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Participants
         */
        "participants": Peer[];
        /**
          * Pinned Participants
         */
        "pinnedParticipants": Peer[];
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    interface RtkSpotlightIndicator {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component used as a stage that commonly houses
     * the `grid` and `sidebar` components.
     */
    interface RtkStage {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    interface RtkStageToggle {
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size1;
        /**
          * States
         */
        "states": States1;
        /**
          * Language
         */
        "t": RtkI18n1;
        /**
          * Variant
         */
        "variant": ControlBarVariant;
    }
    /**
     * A switch component which follows RTK Design System.
     */
    interface RtkSwitch {
        /**
          * Whether the switch is enabled/checked
         */
        "checked": boolean;
        /**
          * Whether switch is readonly
         */
        "disabled": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Whether switch is readonly
         */
        "readonly": boolean;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    interface RtkTabBar {
        /**
          * Active tab
         */
        "activeTab": Tab;
        /**
          * UI Config
         */
        "config": UIConfig;
        /**
          * Icon Pack
         */
        "iconPack": IconPack;
        /**
          * Grid Layout
         */
        "layout": GridLayout1;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Size
         */
        "size": Size;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Tabs
         */
        "tabs": Tab[];
    }
    /**
     * A component which renders a text composer
     */
    interface RtkTextComposerView {
        /**
          * Disable the text input (default = false)
         */
        "disabled": boolean;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Keydown event handler function
         */
        "keyDownHandler": (e: KeyboardEvent) => void;
        /**
          * Max length for text input
         */
        "maxLength": number;
        /**
          * Placeholder text
         */
        "placeholder": string;
        /**
          * Boolean to indicate if rate limit is breached
         */
        "rateLimitBreached": boolean;
        /**
          * Sets value of the text input
         */
        "setText": (text: string, focus?: boolean) => Promise<void>;
        /**
          * Language
         */
        "t": RtkI18n1;
        /**
          * Default value for text input
         */
        "value": string;
    }
    /**
     * A component which renders a text message from chat.
     */
    interface RtkTextMessage {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Whether the message is continued by same user
         */
        "isContinued": boolean;
        /**
          * Text message object
         */
        "message": TextMessage;
        /**
          * Date object of now, to calculate distance between dates
         */
        "now": Date;
        /**
          * show message in bubble
         */
        "showBubble": boolean;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    /**
     * A component which renders a text message from chat.
     */
    interface RtkTextMessageView {
        /**
          * Renders text as markdown (default = true)
         */
        "isMarkdown": boolean;
        /**
          * Text message
         */
        "text": string;
    }
    /**
     * Tooltip component which follows RTK Design System.
     */
    interface RtkTooltip {
        /**
          * Delay before showing the tooltip
         */
        "delay": number;
        /**
          * Disabled
         */
        "disabled": boolean;
        /**
          * Tooltip kind
         */
        "kind": TooltipKind;
        /**
          * Tooltip label
         */
        "label": string;
        /**
          * Open
         */
        "open": boolean;
        /**
          * Placement of menu
         */
        "placement": Placement;
        /**
          * Size
         */
        "size": Size;
        /**
          * Tooltip variant
         */
        "variant": TooltipVariant;
    }
    /**
     * A component which shows a transcript.
     * You need to remove the element after you receive the
     * `rtkTranscriptDismiss` event.
     */
    interface RtkTranscript {
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Message
         */
        "transcript": Transcript & { renderedId?: string };
    }
    /**
     * A component which handles transcripts.
     * You can configure which transcripts you want to see and which ones you want to hear.
     * There are also certain limits which you can set as well.
     */
    interface RtkTranscripts {
        /**
          * Config object
         */
        "config": UIConfig;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * States object
         */
        "states": States;
        /**
          * Language
         */
        "t": RtkI18n;
    }
    interface RtkUiProvider {
        /**
          * Config
         */
        "config": UIConfig1;
        /**
          * Icon pack
         */
        "iconPack": IconPack1;
        /**
          * Meeting
         */
        "meeting": Meeting | null;
        /**
          * Fill type
         */
        "mode": MeetingMode1;
        /**
          * Whether to show setup screen or not
         */
        "showSetupScreen": boolean;
        /**
          * Language utility
         */
        "t": RtkI18n1;
    }
    /**
     * A component which shows count of total joined participants in a meeting.
     */
    interface RtkViewerCount {
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Language
         */
        "t": RtkI18n;
        /**
          * Viewer count variant
         */
        "variant": ViewerCountVariant;
    }
    interface RtkVirtualizedParticipantList {
        /**
          * Buffer items to render before and after the visible area
         */
        "bufferedItemsCount": number;
        /**
          * Element to render if list is empty
         */
        "emptyListElement": HTMLElement;
        /**
          * Height of each item in pixels (assumed fixed)
         */
        "itemHeight": number;
        /**
          * Items to be virtualized
         */
        "items": Peer1[];
        /**
          * Function to render each item
         */
        "renderItem": (item: Peer1, index: number) => HTMLElement;
    }
    interface RtkWaitingScreen {
        /**
          * Config
         */
        "config": UIConfig;
        /**
          * Icon pack
         */
        "iconPack": IconPack;
        /**
          * Meeting object
         */
        "meeting": Meeting;
        /**
          * Language
         */
        "t": RtkI18n;
    }
}
export interface RtkAiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkAiElement;
}
export interface RtkAiToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkAiToggleElement;
}
export interface RtkBreakoutRoomManagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkBreakoutRoomManagerElement;
}
export interface RtkBreakoutRoomParticipantsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkBreakoutRoomParticipantsElement;
}
export interface RtkBreakoutRoomsManagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkBreakoutRoomsManagerElement;
}
export interface RtkBreakoutRoomsToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkBreakoutRoomsToggleElement;
}
export interface RtkBroadcastMessageModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkBroadcastMessageModalElement;
}
export interface RtkCameraToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkCameraToggleElement;
}
export interface RtkCaptionToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkCaptionToggleElement;
}
export interface RtkChannelCreatorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkChannelCreatorElement;
}
export interface RtkChannelHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkChannelHeaderElement;
}
export interface RtkChannelSelectorUiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkChannelSelectorUiElement;
}
export interface RtkChannelSelectorViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkChannelSelectorViewElement;
}
export interface RtkChatCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkChatElement;
}
export interface RtkChatComposerUiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkChatComposerUiElement;
}
export interface RtkChatComposerViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkChatComposerViewElement;
}
export interface RtkChatMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkChatMessageElement;
}
export interface RtkChatMessagesUiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkChatMessagesUiElement;
}
export interface RtkChatMessagesUiPaginatedCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkChatMessagesUiPaginatedElement;
}
export interface RtkChatSelectorUiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkChatSelectorUiElement;
}
export interface RtkChatToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkChatToggleElement;
}
export interface RtkConfirmationModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkConfirmationModalElement;
}
export interface RtkCounterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkCounterElement;
}
export interface RtkDebuggerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkDebuggerElement;
}
export interface RtkDebuggerToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkDebuggerToggleElement;
}
export interface RtkDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkDialogElement;
}
export interface RtkDialogManagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkDialogManagerElement;
}
export interface RtkDraftAttachmentViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkDraftAttachmentViewElement;
}
export interface RtkEmojiPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkEmojiPickerElement;
}
export interface RtkFileDropzoneCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkFileDropzoneElement;
}
export interface RtkFilePickerButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkFilePickerButtonElement;
}
export interface RtkFullscreenToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkFullscreenToggleElement;
}
export interface RtkGridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkGridElement;
}
export interface RtkImageMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkImageMessageElement;
}
export interface RtkImageMessageViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkImageMessageViewElement;
}
export interface RtkImageViewerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkImageViewerElement;
}
export interface RtkJoinStageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkJoinStageElement;
}
export interface RtkLeaveButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkLeaveButtonElement;
}
export interface RtkLeaveMeetingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkLeaveMeetingElement;
}
export interface RtkLivestreamPlayerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkLivestreamPlayerElement;
}
export interface RtkLivestreamToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkLivestreamToggleElement;
}
export interface RtkMeetingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkMeetingElement;
}
export interface RtkMessageViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkMessageViewElement;
}
export interface RtkMicToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkMicToggleElement;
}
export interface RtkMoreToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkMoreToggleElement;
}
export interface RtkMuteAllButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkMuteAllButtonElement;
}
export interface RtkMuteAllConfirmationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkMuteAllConfirmationElement;
}
export interface RtkNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkNotificationElement;
}
export interface RtkOverlayModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkOverlayModalElement;
}
export interface RtkParticipantCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkParticipantElement;
}
export interface RtkParticipantTileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkParticipantTileElement;
}
export interface RtkParticipantsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkParticipantsElement;
}
export interface RtkParticipantsAudioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkParticipantsAudioElement;
}
export interface RtkParticipantsToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkParticipantsToggleElement;
}
export interface RtkPermissionsMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkPermissionsMessageElement;
}
export interface RtkPipToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkPipToggleElement;
}
export interface RtkPluginsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkPluginsElement;
}
export interface RtkPluginsToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkPluginsToggleElement;
}
export interface RtkPollCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkPollElement;
}
export interface RtkPollFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkPollFormElement;
}
export interface RtkPollsToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkPollsToggleElement;
}
export interface RtkRecordingToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkRecordingToggleElement;
}
export interface RtkScreenShareToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkScreenShareToggleElement;
}
export interface RtkScreenshareViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkScreenshareViewElement;
}
export interface RtkSettingsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkSettingsElement;
}
export interface RtkSettingsAudioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkSettingsAudioElement;
}
export interface RtkSettingsToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkSettingsToggleElement;
}
export interface RtkSettingsVideoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkSettingsVideoElement;
}
export interface RtkSetupScreenCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkSetupScreenElement;
}
export interface RtkSidebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkSidebarElement;
}
export interface RtkSidebarUiCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkSidebarUiElement;
}
export interface RtkStageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkStageElement;
}
export interface RtkStageToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkStageToggleElement;
}
export interface RtkSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkSwitchElement;
}
export interface RtkTabBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkTabBarElement;
}
export interface RtkTextComposerViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkTextComposerViewElement;
}
export interface RtkTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkTooltipElement;
}
export interface RtkTranscriptCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkTranscriptElement;
}
export interface RtkUiProviderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRtkUiProviderElement;
}
declare global {
    interface HTMLRtkAiElementEventMap {
        "rtkStateUpdate": States;
    }
    interface HTMLRtkAiElement extends Components.RtkAi, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkAiElementEventMap>(type: K, listener: (this: HTMLRtkAiElement, ev: RtkAiCustomEvent<HTMLRtkAiElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkAiElementEventMap>(type: K, listener: (this: HTMLRtkAiElement, ev: RtkAiCustomEvent<HTMLRtkAiElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkAiElement: {
        prototype: HTMLRtkAiElement;
        new (): HTMLRtkAiElement;
    };
    interface HTMLRtkAiToggleElementEventMap {
        "rtkStateUpdate": States;
    }
    interface HTMLRtkAiToggleElement extends Components.RtkAiToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkAiToggleElementEventMap>(type: K, listener: (this: HTMLRtkAiToggleElement, ev: RtkAiToggleCustomEvent<HTMLRtkAiToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkAiToggleElementEventMap>(type: K, listener: (this: HTMLRtkAiToggleElement, ev: RtkAiToggleCustomEvent<HTMLRtkAiToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkAiToggleElement: {
        prototype: HTMLRtkAiToggleElement;
        new (): HTMLRtkAiToggleElement;
    };
    interface HTMLRtkAiTranscriptionsElement extends Components.RtkAiTranscriptions, HTMLStencilElement {
    }
    var HTMLRtkAiTranscriptionsElement: {
        prototype: HTMLRtkAiTranscriptionsElement;
        new (): HTMLRtkAiTranscriptionsElement;
    };
    interface HTMLRtkAudioGridElement extends Components.RtkAudioGrid, HTMLStencilElement {
    }
    var HTMLRtkAudioGridElement: {
        prototype: HTMLRtkAudioGridElement;
        new (): HTMLRtkAudioGridElement;
    };
    interface HTMLRtkAudioTileElement extends Components.RtkAudioTile, HTMLStencilElement {
    }
    var HTMLRtkAudioTileElement: {
        prototype: HTMLRtkAudioTileElement;
        new (): HTMLRtkAudioTileElement;
    };
    /**
     * An audio visualizer component which visualizes a participants audio.
     * Commonly used inside `rtk-name-tag`.
     */
    interface HTMLRtkAudioVisualizerElement extends Components.RtkAudioVisualizer, HTMLStencilElement {
    }
    var HTMLRtkAudioVisualizerElement: {
        prototype: HTMLRtkAudioVisualizerElement;
        new (): HTMLRtkAudioVisualizerElement;
    };
    /**
     * Avatar component which renders a participant's image or their initials.
     */
    interface HTMLRtkAvatarElement extends Components.RtkAvatar, HTMLStencilElement {
    }
    var HTMLRtkAvatarElement: {
        prototype: HTMLRtkAvatarElement;
        new (): HTMLRtkAvatarElement;
    };
    interface HTMLRtkBreakoutRoomManagerElementEventMap {
        "participantsAdd": null;
        "participantDelete": {
    customParticipantId: string;
  };
        "roomJoin": null;
        "delete": string;
        "update": {
    title: string | undefined;
    id: string;
  };
    }
    interface HTMLRtkBreakoutRoomManagerElement extends Components.RtkBreakoutRoomManager, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkBreakoutRoomManagerElementEventMap>(type: K, listener: (this: HTMLRtkBreakoutRoomManagerElement, ev: RtkBreakoutRoomManagerCustomEvent<HTMLRtkBreakoutRoomManagerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkBreakoutRoomManagerElementEventMap>(type: K, listener: (this: HTMLRtkBreakoutRoomManagerElement, ev: RtkBreakoutRoomManagerCustomEvent<HTMLRtkBreakoutRoomManagerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkBreakoutRoomManagerElement: {
        prototype: HTMLRtkBreakoutRoomManagerElement;
        new (): HTMLRtkBreakoutRoomManagerElement;
    };
    interface HTMLRtkBreakoutRoomParticipantsElementEventMap {
        "selectedParticipantsUpdate": string[];
        "allParticipantsToggleUpdate": string[];
        "participantsDragging": boolean;
    }
    /**
     * A component which lists all participants, with ability to
     * run privileged actions on each participant according to your permissions.
     */
    interface HTMLRtkBreakoutRoomParticipantsElement extends Components.RtkBreakoutRoomParticipants, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkBreakoutRoomParticipantsElementEventMap>(type: K, listener: (this: HTMLRtkBreakoutRoomParticipantsElement, ev: RtkBreakoutRoomParticipantsCustomEvent<HTMLRtkBreakoutRoomParticipantsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkBreakoutRoomParticipantsElementEventMap>(type: K, listener: (this: HTMLRtkBreakoutRoomParticipantsElement, ev: RtkBreakoutRoomParticipantsCustomEvent<HTMLRtkBreakoutRoomParticipantsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkBreakoutRoomParticipantsElement: {
        prototype: HTMLRtkBreakoutRoomParticipantsElement;
        new (): HTMLRtkBreakoutRoomParticipantsElement;
    };
    interface HTMLRtkBreakoutRoomsManagerElementEventMap {
        "rtkStateUpdate": PartialStateEvent;
    }
    interface HTMLRtkBreakoutRoomsManagerElement extends Components.RtkBreakoutRoomsManager, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkBreakoutRoomsManagerElementEventMap>(type: K, listener: (this: HTMLRtkBreakoutRoomsManagerElement, ev: RtkBreakoutRoomsManagerCustomEvent<HTMLRtkBreakoutRoomsManagerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkBreakoutRoomsManagerElementEventMap>(type: K, listener: (this: HTMLRtkBreakoutRoomsManagerElement, ev: RtkBreakoutRoomsManagerCustomEvent<HTMLRtkBreakoutRoomsManagerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkBreakoutRoomsManagerElement: {
        prototype: HTMLRtkBreakoutRoomsManagerElement;
        new (): HTMLRtkBreakoutRoomsManagerElement;
    };
    interface HTMLRtkBreakoutRoomsToggleElementEventMap {
        "rtkStateUpdate": PartialStateEvent;
    }
    /**
     * A button which toggles visibility of breakout rooms.
     * You need to pass the `meeting` object to it.
     */
    interface HTMLRtkBreakoutRoomsToggleElement extends Components.RtkBreakoutRoomsToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkBreakoutRoomsToggleElementEventMap>(type: K, listener: (this: HTMLRtkBreakoutRoomsToggleElement, ev: RtkBreakoutRoomsToggleCustomEvent<HTMLRtkBreakoutRoomsToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkBreakoutRoomsToggleElementEventMap>(type: K, listener: (this: HTMLRtkBreakoutRoomsToggleElement, ev: RtkBreakoutRoomsToggleCustomEvent<HTMLRtkBreakoutRoomsToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkBreakoutRoomsToggleElement: {
        prototype: HTMLRtkBreakoutRoomsToggleElement;
        new (): HTMLRtkBreakoutRoomsToggleElement;
    };
    interface HTMLRtkBroadcastMessageModalElementEventMap {
        "rtkStateUpdate": States1;
    }
    interface HTMLRtkBroadcastMessageModalElement extends Components.RtkBroadcastMessageModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkBroadcastMessageModalElementEventMap>(type: K, listener: (this: HTMLRtkBroadcastMessageModalElement, ev: RtkBroadcastMessageModalCustomEvent<HTMLRtkBroadcastMessageModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkBroadcastMessageModalElementEventMap>(type: K, listener: (this: HTMLRtkBroadcastMessageModalElement, ev: RtkBroadcastMessageModalCustomEvent<HTMLRtkBroadcastMessageModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkBroadcastMessageModalElement: {
        prototype: HTMLRtkBroadcastMessageModalElement;
        new (): HTMLRtkBroadcastMessageModalElement;
    };
    /**
     * A button that follows RTK Design System.
     */
    interface HTMLRtkButtonElement extends Components.RtkButton, HTMLStencilElement {
    }
    var HTMLRtkButtonElement: {
        prototype: HTMLRtkButtonElement;
        new (): HTMLRtkButtonElement;
    };
    /**
     * A component which lets to manage your audio devices and audio preferences.
     * Emits `rtkStateUpdate` event with data for muting notification sounds:
     * ```ts
     * {
     *  prefs: {
     *    muteNotificationSounds: boolean
     *  }
     * }
     * ```
     */
    interface HTMLRtkCameraSelectorElement extends Components.RtkCameraSelector, HTMLStencilElement {
    }
    var HTMLRtkCameraSelectorElement: {
        prototype: HTMLRtkCameraSelectorElement;
        new (): HTMLRtkCameraSelectorElement;
    };
    interface HTMLRtkCameraToggleElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A button which toggles your camera.
     */
    interface HTMLRtkCameraToggleElement extends Components.RtkCameraToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkCameraToggleElementEventMap>(type: K, listener: (this: HTMLRtkCameraToggleElement, ev: RtkCameraToggleCustomEvent<HTMLRtkCameraToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkCameraToggleElementEventMap>(type: K, listener: (this: HTMLRtkCameraToggleElement, ev: RtkCameraToggleCustomEvent<HTMLRtkCameraToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkCameraToggleElement: {
        prototype: HTMLRtkCameraToggleElement;
        new (): HTMLRtkCameraToggleElement;
    };
    interface HTMLRtkCaptionToggleElementEventMap {
        "rtkStateUpdate": States1;
    }
    interface HTMLRtkCaptionToggleElement extends Components.RtkCaptionToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkCaptionToggleElementEventMap>(type: K, listener: (this: HTMLRtkCaptionToggleElement, ev: RtkCaptionToggleCustomEvent<HTMLRtkCaptionToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkCaptionToggleElementEventMap>(type: K, listener: (this: HTMLRtkCaptionToggleElement, ev: RtkCaptionToggleCustomEvent<HTMLRtkCaptionToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkCaptionToggleElement: {
        prototype: HTMLRtkCaptionToggleElement;
        new (): HTMLRtkCaptionToggleElement;
    };
    interface HTMLRtkChannelCreatorElementEventMap {
        "rtkStateUpdate": States1;
        "switchChannel": string;
    }
    interface HTMLRtkChannelCreatorElement extends Components.RtkChannelCreator, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkChannelCreatorElementEventMap>(type: K, listener: (this: HTMLRtkChannelCreatorElement, ev: RtkChannelCreatorCustomEvent<HTMLRtkChannelCreatorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkChannelCreatorElementEventMap>(type: K, listener: (this: HTMLRtkChannelCreatorElement, ev: RtkChannelCreatorCustomEvent<HTMLRtkChannelCreatorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkChannelCreatorElement: {
        prototype: HTMLRtkChannelCreatorElement;
        new (): HTMLRtkChannelCreatorElement;
    };
    interface HTMLRtkChannelDetailsElement extends Components.RtkChannelDetails, HTMLStencilElement {
    }
    var HTMLRtkChannelDetailsElement: {
        prototype: HTMLRtkChannelDetailsElement;
        new (): HTMLRtkChannelDetailsElement;
    };
    interface HTMLRtkChannelHeaderElementEventMap {
        "search": string;
        "searchDismissed": any;
        "back": void;
    }
    interface HTMLRtkChannelHeaderElement extends Components.RtkChannelHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkChannelHeaderElementEventMap>(type: K, listener: (this: HTMLRtkChannelHeaderElement, ev: RtkChannelHeaderCustomEvent<HTMLRtkChannelHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkChannelHeaderElementEventMap>(type: K, listener: (this: HTMLRtkChannelHeaderElement, ev: RtkChannelHeaderCustomEvent<HTMLRtkChannelHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkChannelHeaderElement: {
        prototype: HTMLRtkChannelHeaderElement;
        new (): HTMLRtkChannelHeaderElement;
    };
    interface HTMLRtkChannelSelectorUiElementEventMap {
        "channelChanged": string;
    }
    interface HTMLRtkChannelSelectorUiElement extends Components.RtkChannelSelectorUi, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkChannelSelectorUiElementEventMap>(type: K, listener: (this: HTMLRtkChannelSelectorUiElement, ev: RtkChannelSelectorUiCustomEvent<HTMLRtkChannelSelectorUiElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkChannelSelectorUiElementEventMap>(type: K, listener: (this: HTMLRtkChannelSelectorUiElement, ev: RtkChannelSelectorUiCustomEvent<HTMLRtkChannelSelectorUiElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkChannelSelectorUiElement: {
        prototype: HTMLRtkChannelSelectorUiElement;
        new (): HTMLRtkChannelSelectorUiElement;
    };
    interface HTMLRtkChannelSelectorViewElementEventMap {
        "channelChange": {
    id: string;
    name: string;
    avatarUrl?: string;
    icon?: keyof IconPack1;
    latestMessage?: string;
    latestMessageTime?: Date;
    unreadCount?: number;
  };
    }
    interface HTMLRtkChannelSelectorViewElement extends Components.RtkChannelSelectorView, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkChannelSelectorViewElementEventMap>(type: K, listener: (this: HTMLRtkChannelSelectorViewElement, ev: RtkChannelSelectorViewCustomEvent<HTMLRtkChannelSelectorViewElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkChannelSelectorViewElementEventMap>(type: K, listener: (this: HTMLRtkChannelSelectorViewElement, ev: RtkChannelSelectorViewCustomEvent<HTMLRtkChannelSelectorViewElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkChannelSelectorViewElement: {
        prototype: HTMLRtkChannelSelectorViewElement;
        new (): HTMLRtkChannelSelectorViewElement;
    };
    interface HTMLRtkChatElementEventMap {
        "rtkStateUpdate": States1;
    }
    /**
     * Fully featured chat component with image & file upload, emoji picker and auto-scroll.
     */
    interface HTMLRtkChatElement extends Components.RtkChat, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkChatElementEventMap>(type: K, listener: (this: HTMLRtkChatElement, ev: RtkChatCustomEvent<HTMLRtkChatElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkChatElementEventMap>(type: K, listener: (this: HTMLRtkChatElement, ev: RtkChatCustomEvent<HTMLRtkChatElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkChatElement: {
        prototype: HTMLRtkChatElement;
        new (): HTMLRtkChatElement;
    };
    interface HTMLRtkChatComposerUiElementEventMap {
        "rtkNewMessage": RtkNewMessageEvent;
        "rtkEditMessage": {
    id: string;
    message: string;
    channelId?: string;
  };
        "rtkEditCancelled": any;
    }
    interface HTMLRtkChatComposerUiElement extends Components.RtkChatComposerUi, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkChatComposerUiElementEventMap>(type: K, listener: (this: HTMLRtkChatComposerUiElement, ev: RtkChatComposerUiCustomEvent<HTMLRtkChatComposerUiElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkChatComposerUiElementEventMap>(type: K, listener: (this: HTMLRtkChatComposerUiElement, ev: RtkChatComposerUiCustomEvent<HTMLRtkChatComposerUiElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkChatComposerUiElement: {
        prototype: HTMLRtkChatComposerUiElement;
        new (): HTMLRtkChatComposerUiElement;
    };
    interface HTMLRtkChatComposerViewElementEventMap {
        "newMessage": NewMessageEvent;
        "editMessage": string;
        "editCancel": void;
        "quotedMessageDismiss": void;
    }
    /**
     * A component which renders a chat composer
     */
    interface HTMLRtkChatComposerViewElement extends Components.RtkChatComposerView, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkChatComposerViewElementEventMap>(type: K, listener: (this: HTMLRtkChatComposerViewElement, ev: RtkChatComposerViewCustomEvent<HTMLRtkChatComposerViewElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkChatComposerViewElementEventMap>(type: K, listener: (this: HTMLRtkChatComposerViewElement, ev: RtkChatComposerViewCustomEvent<HTMLRtkChatComposerViewElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkChatComposerViewElement: {
        prototype: HTMLRtkChatComposerViewElement;
        new (): HTMLRtkChatComposerViewElement;
    };
    interface HTMLRtkChatMessageElementEventMap {
        "edit": Message;
        "reply": Message;
        "pin": Message;
        "delete": Message;
    }
    interface HTMLRtkChatMessageElement extends Components.RtkChatMessage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkChatMessageElementEventMap>(type: K, listener: (this: HTMLRtkChatMessageElement, ev: RtkChatMessageCustomEvent<HTMLRtkChatMessageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkChatMessageElementEventMap>(type: K, listener: (this: HTMLRtkChatMessageElement, ev: RtkChatMessageCustomEvent<HTMLRtkChatMessageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkChatMessageElement: {
        prototype: HTMLRtkChatMessageElement;
        new (): HTMLRtkChatMessageElement;
    };
    interface HTMLRtkChatMessagesUiElementEventMap {
        "pinMessage": Message;
        "rtkStateUpdate": States;
    }
    interface HTMLRtkChatMessagesUiElement extends Components.RtkChatMessagesUi, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkChatMessagesUiElementEventMap>(type: K, listener: (this: HTMLRtkChatMessagesUiElement, ev: RtkChatMessagesUiCustomEvent<HTMLRtkChatMessagesUiElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkChatMessagesUiElementEventMap>(type: K, listener: (this: HTMLRtkChatMessagesUiElement, ev: RtkChatMessagesUiCustomEvent<HTMLRtkChatMessagesUiElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkChatMessagesUiElement: {
        prototype: HTMLRtkChatMessagesUiElement;
        new (): HTMLRtkChatMessagesUiElement;
    };
    interface HTMLRtkChatMessagesUiPaginatedElementEventMap {
        "editMessageInit": {
    payload: TextMessage;
    flags: { isReply?: boolean; isEdit?: boolean };
  };
        "pinMessage": Message;
        "deleteMessage": Message;
        "rtkStateUpdate": States;
    }
    interface HTMLRtkChatMessagesUiPaginatedElement extends Components.RtkChatMessagesUiPaginated, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkChatMessagesUiPaginatedElementEventMap>(type: K, listener: (this: HTMLRtkChatMessagesUiPaginatedElement, ev: RtkChatMessagesUiPaginatedCustomEvent<HTMLRtkChatMessagesUiPaginatedElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkChatMessagesUiPaginatedElementEventMap>(type: K, listener: (this: HTMLRtkChatMessagesUiPaginatedElement, ev: RtkChatMessagesUiPaginatedCustomEvent<HTMLRtkChatMessagesUiPaginatedElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkChatMessagesUiPaginatedElement: {
        prototype: HTMLRtkChatMessagesUiPaginatedElement;
        new (): HTMLRtkChatMessagesUiPaginatedElement;
    };
    interface HTMLRtkChatSearchResultsElement extends Components.RtkChatSearchResults, HTMLStencilElement {
    }
    var HTMLRtkChatSearchResultsElement: {
        prototype: HTMLRtkChatSearchResultsElement;
        new (): HTMLRtkChatSearchResultsElement;
    };
    interface HTMLRtkChatSelectorUiElementEventMap {
        "rtkChatGroupChanged": ChatGroupChangedType;
    }
    interface HTMLRtkChatSelectorUiElement extends Components.RtkChatSelectorUi, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkChatSelectorUiElementEventMap>(type: K, listener: (this: HTMLRtkChatSelectorUiElement, ev: RtkChatSelectorUiCustomEvent<HTMLRtkChatSelectorUiElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkChatSelectorUiElementEventMap>(type: K, listener: (this: HTMLRtkChatSelectorUiElement, ev: RtkChatSelectorUiCustomEvent<HTMLRtkChatSelectorUiElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkChatSelectorUiElement: {
        prototype: HTMLRtkChatSelectorUiElement;
        new (): HTMLRtkChatSelectorUiElement;
    };
    interface HTMLRtkChatToggleElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A button which toggles visibility of chat.
     * You need to pass the `meeting` object to it to see the unread messages count badge.
     * When clicked it emits a `rtkStateUpdate` event with the data:
     * ```ts
     * { activeSidebar: boolean; sidebar: 'chat' }
     * ```
     */
    interface HTMLRtkChatToggleElement extends Components.RtkChatToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkChatToggleElementEventMap>(type: K, listener: (this: HTMLRtkChatToggleElement, ev: RtkChatToggleCustomEvent<HTMLRtkChatToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkChatToggleElementEventMap>(type: K, listener: (this: HTMLRtkChatToggleElement, ev: RtkChatToggleCustomEvent<HTMLRtkChatToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkChatToggleElement: {
        prototype: HTMLRtkChatToggleElement;
        new (): HTMLRtkChatToggleElement;
    };
    /**
     * Shows the time elapsed in a meeting.
     */
    interface HTMLRtkClockElement extends Components.RtkClock, HTMLStencilElement {
    }
    var HTMLRtkClockElement: {
        prototype: HTMLRtkClockElement;
        new (): HTMLRtkClockElement;
    };
    interface HTMLRtkConfirmationModalElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A confirmation modal.
     */
    interface HTMLRtkConfirmationModalElement extends Components.RtkConfirmationModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkConfirmationModalElementEventMap>(type: K, listener: (this: HTMLRtkConfirmationModalElement, ev: RtkConfirmationModalCustomEvent<HTMLRtkConfirmationModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkConfirmationModalElementEventMap>(type: K, listener: (this: HTMLRtkConfirmationModalElement, ev: RtkConfirmationModalCustomEvent<HTMLRtkConfirmationModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkConfirmationModalElement: {
        prototype: HTMLRtkConfirmationModalElement;
        new (): HTMLRtkConfirmationModalElement;
    };
    /**
     * Controlbar component provides you with various designs as variants.
     */
    interface HTMLRtkControlbarElement extends Components.RtkControlbar, HTMLStencilElement {
    }
    var HTMLRtkControlbarElement: {
        prototype: HTMLRtkControlbarElement;
        new (): HTMLRtkControlbarElement;
    };
    /**
     * A skeleton component used for composing custom controlbar buttons.
     */
    interface HTMLRtkControlbarButtonElement extends Components.RtkControlbarButton, HTMLStencilElement {
    }
    var HTMLRtkControlbarButtonElement: {
        prototype: HTMLRtkControlbarButtonElement;
        new (): HTMLRtkControlbarButtonElement;
    };
    interface HTMLRtkCounterElementEventMap {
        "valueChange": string;
    }
    /**
     * A number picker with increment and decrement buttons.
     */
    interface HTMLRtkCounterElement extends Components.RtkCounter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkCounterElementEventMap>(type: K, listener: (this: HTMLRtkCounterElement, ev: RtkCounterCustomEvent<HTMLRtkCounterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkCounterElementEventMap>(type: K, listener: (this: HTMLRtkCounterElement, ev: RtkCounterCustomEvent<HTMLRtkCounterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkCounterElement: {
        prototype: HTMLRtkCounterElement;
        new (): HTMLRtkCounterElement;
    };
    interface HTMLRtkDebuggerElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A troubleshooting component to identify and fix any issues in the meeting.
     */
    interface HTMLRtkDebuggerElement extends Components.RtkDebugger, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkDebuggerElementEventMap>(type: K, listener: (this: HTMLRtkDebuggerElement, ev: RtkDebuggerCustomEvent<HTMLRtkDebuggerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkDebuggerElementEventMap>(type: K, listener: (this: HTMLRtkDebuggerElement, ev: RtkDebuggerCustomEvent<HTMLRtkDebuggerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkDebuggerElement: {
        prototype: HTMLRtkDebuggerElement;
        new (): HTMLRtkDebuggerElement;
    };
    interface HTMLRtkDebuggerAudioElement extends Components.RtkDebuggerAudio, HTMLStencilElement {
    }
    var HTMLRtkDebuggerAudioElement: {
        prototype: HTMLRtkDebuggerAudioElement;
        new (): HTMLRtkDebuggerAudioElement;
    };
    interface HTMLRtkDebuggerScreenshareElement extends Components.RtkDebuggerScreenshare, HTMLStencilElement {
    }
    var HTMLRtkDebuggerScreenshareElement: {
        prototype: HTMLRtkDebuggerScreenshareElement;
        new (): HTMLRtkDebuggerScreenshareElement;
    };
    interface HTMLRtkDebuggerSystemElement extends Components.RtkDebuggerSystem, HTMLStencilElement {
    }
    var HTMLRtkDebuggerSystemElement: {
        prototype: HTMLRtkDebuggerSystemElement;
        new (): HTMLRtkDebuggerSystemElement;
    };
    interface HTMLRtkDebuggerToggleElementEventMap {
        "rtkStateUpdate": States;
    }
    interface HTMLRtkDebuggerToggleElement extends Components.RtkDebuggerToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkDebuggerToggleElementEventMap>(type: K, listener: (this: HTMLRtkDebuggerToggleElement, ev: RtkDebuggerToggleCustomEvent<HTMLRtkDebuggerToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkDebuggerToggleElementEventMap>(type: K, listener: (this: HTMLRtkDebuggerToggleElement, ev: RtkDebuggerToggleCustomEvent<HTMLRtkDebuggerToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkDebuggerToggleElement: {
        prototype: HTMLRtkDebuggerToggleElement;
        new (): HTMLRtkDebuggerToggleElement;
    };
    interface HTMLRtkDebuggerVideoElement extends Components.RtkDebuggerVideo, HTMLStencilElement {
    }
    var HTMLRtkDebuggerVideoElement: {
        prototype: HTMLRtkDebuggerVideoElement;
        new (): HTMLRtkDebuggerVideoElement;
    };
    interface HTMLRtkDialogElementEventMap {
        "rtkDialogClose": any;
    }
    /**
     * A dialog component.
     */
    interface HTMLRtkDialogElement extends Components.RtkDialog, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkDialogElementEventMap>(type: K, listener: (this: HTMLRtkDialogElement, ev: RtkDialogCustomEvent<HTMLRtkDialogElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkDialogElementEventMap>(type: K, listener: (this: HTMLRtkDialogElement, ev: RtkDialogCustomEvent<HTMLRtkDialogElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkDialogElement: {
        prototype: HTMLRtkDialogElement;
        new (): HTMLRtkDialogElement;
    };
    interface HTMLRtkDialogManagerElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A component which handles all dialog elements in a component such as:
     * - rtk-settings
     * - rtk-leave-meeting
     * - rtk-permissions-message
     * - rtk-image-viewer
     * - rtk-breakout-rooms-manager
     * This components depends on the values from `states` object.
     */
    interface HTMLRtkDialogManagerElement extends Components.RtkDialogManager, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkDialogManagerElementEventMap>(type: K, listener: (this: HTMLRtkDialogManagerElement, ev: RtkDialogManagerCustomEvent<HTMLRtkDialogManagerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkDialogManagerElementEventMap>(type: K, listener: (this: HTMLRtkDialogManagerElement, ev: RtkDialogManagerCustomEvent<HTMLRtkDialogManagerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkDialogManagerElement: {
        prototype: HTMLRtkDialogManagerElement;
        new (): HTMLRtkDialogManagerElement;
    };
    interface HTMLRtkDraftAttachmentViewElementEventMap {
        "deleteAttachment": any;
    }
    /**
     * A component which renders the draft attachment to send
     */
    interface HTMLRtkDraftAttachmentViewElement extends Components.RtkDraftAttachmentView, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkDraftAttachmentViewElementEventMap>(type: K, listener: (this: HTMLRtkDraftAttachmentViewElement, ev: RtkDraftAttachmentViewCustomEvent<HTMLRtkDraftAttachmentViewElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkDraftAttachmentViewElementEventMap>(type: K, listener: (this: HTMLRtkDraftAttachmentViewElement, ev: RtkDraftAttachmentViewCustomEvent<HTMLRtkDraftAttachmentViewElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkDraftAttachmentViewElement: {
        prototype: HTMLRtkDraftAttachmentViewElement;
        new (): HTMLRtkDraftAttachmentViewElement;
    };
    interface HTMLRtkEmojiPickerElementEventMap {
        "pickerClose": void;
        "rtkEmojiClicked": string;
    }
    /**
     * A very simple emoji picker component.
     */
    interface HTMLRtkEmojiPickerElement extends Components.RtkEmojiPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkEmojiPickerElementEventMap>(type: K, listener: (this: HTMLRtkEmojiPickerElement, ev: RtkEmojiPickerCustomEvent<HTMLRtkEmojiPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkEmojiPickerElementEventMap>(type: K, listener: (this: HTMLRtkEmojiPickerElement, ev: RtkEmojiPickerCustomEvent<HTMLRtkEmojiPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkEmojiPickerElement: {
        prototype: HTMLRtkEmojiPickerElement;
        new (): HTMLRtkEmojiPickerElement;
    };
    interface HTMLRtkEmojiPickerButtonElement extends Components.RtkEmojiPickerButton, HTMLStencilElement {
    }
    var HTMLRtkEmojiPickerButtonElement: {
        prototype: HTMLRtkEmojiPickerButtonElement;
        new (): HTMLRtkEmojiPickerButtonElement;
    };
    /**
     * A screen which shows a meeting has ended.
     */
    interface HTMLRtkEndedScreenElement extends Components.RtkEndedScreen, HTMLStencilElement {
    }
    var HTMLRtkEndedScreenElement: {
        prototype: HTMLRtkEndedScreenElement;
        new (): HTMLRtkEndedScreenElement;
    };
    interface HTMLRtkFileDropzoneElementEventMap {
        "dropCallback": DragEvent;
    }
    interface HTMLRtkFileDropzoneElement extends Components.RtkFileDropzone, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkFileDropzoneElementEventMap>(type: K, listener: (this: HTMLRtkFileDropzoneElement, ev: RtkFileDropzoneCustomEvent<HTMLRtkFileDropzoneElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkFileDropzoneElementEventMap>(type: K, listener: (this: HTMLRtkFileDropzoneElement, ev: RtkFileDropzoneCustomEvent<HTMLRtkFileDropzoneElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkFileDropzoneElement: {
        prototype: HTMLRtkFileDropzoneElement;
        new (): HTMLRtkFileDropzoneElement;
    };
    /**
     * A component which renders a file message from chat.
     */
    interface HTMLRtkFileMessageElement extends Components.RtkFileMessage, HTMLStencilElement {
    }
    var HTMLRtkFileMessageElement: {
        prototype: HTMLRtkFileMessageElement;
        new (): HTMLRtkFileMessageElement;
    };
    /**
     * A component which renders a file message.
     */
    interface HTMLRtkFileMessageViewElement extends Components.RtkFileMessageView, HTMLStencilElement {
    }
    var HTMLRtkFileMessageViewElement: {
        prototype: HTMLRtkFileMessageViewElement;
        new (): HTMLRtkFileMessageViewElement;
    };
    interface HTMLRtkFilePickerButtonElementEventMap {
        "fileChange": File;
    }
    interface HTMLRtkFilePickerButtonElement extends Components.RtkFilePickerButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkFilePickerButtonElementEventMap>(type: K, listener: (this: HTMLRtkFilePickerButtonElement, ev: RtkFilePickerButtonCustomEvent<HTMLRtkFilePickerButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkFilePickerButtonElementEventMap>(type: K, listener: (this: HTMLRtkFilePickerButtonElement, ev: RtkFilePickerButtonCustomEvent<HTMLRtkFilePickerButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkFilePickerButtonElement: {
        prototype: HTMLRtkFilePickerButtonElement;
        new (): HTMLRtkFilePickerButtonElement;
    };
    interface HTMLRtkFullscreenToggleElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A button which toggles full screen mode for any
     * existing `rtk-meeting` component in the DOM.
     */
    interface HTMLRtkFullscreenToggleElement extends Components.RtkFullscreenToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkFullscreenToggleElementEventMap>(type: K, listener: (this: HTMLRtkFullscreenToggleElement, ev: RtkFullscreenToggleCustomEvent<HTMLRtkFullscreenToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkFullscreenToggleElementEventMap>(type: K, listener: (this: HTMLRtkFullscreenToggleElement, ev: RtkFullscreenToggleCustomEvent<HTMLRtkFullscreenToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkFullscreenToggleElement: {
        prototype: HTMLRtkFullscreenToggleElement;
        new (): HTMLRtkFullscreenToggleElement;
    };
    interface HTMLRtkGridElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * The main grid component which abstracts all the grid handling logic and renders it for you.
     */
    interface HTMLRtkGridElement extends Components.RtkGrid, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkGridElementEventMap>(type: K, listener: (this: HTMLRtkGridElement, ev: RtkGridCustomEvent<HTMLRtkGridElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkGridElementEventMap>(type: K, listener: (this: HTMLRtkGridElement, ev: RtkGridCustomEvent<HTMLRtkGridElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkGridElement: {
        prototype: HTMLRtkGridElement;
        new (): HTMLRtkGridElement;
    };
    /**
     * A component which allows you to change current page and view mode
     * of active participants list. This is reflected in the `rtk-grid` component.
     */
    interface HTMLRtkGridPaginationElement extends Components.RtkGridPagination, HTMLStencilElement {
    }
    var HTMLRtkGridPaginationElement: {
        prototype: HTMLRtkGridPaginationElement;
        new (): HTMLRtkGridPaginationElement;
    };
    /**
     * A component that houses all the header components.
     */
    interface HTMLRtkHeaderElement extends Components.RtkHeader, HTMLStencilElement {
    }
    var HTMLRtkHeaderElement: {
        prototype: HTMLRtkHeaderElement;
        new (): HTMLRtkHeaderElement;
    };
    /**
     * An icon component which accepts an svg string and renders it.
     */
    interface HTMLRtkIconElement extends Components.RtkIcon, HTMLStencilElement {
    }
    var HTMLRtkIconElement: {
        prototype: HTMLRtkIconElement;
        new (): HTMLRtkIconElement;
    };
    /**
     * A screen that handles the idle state,
     * i.e; when you are waiting for data about the meeting, specifically the `meeting` object.
     */
    interface HTMLRtkIdleScreenElement extends Components.RtkIdleScreen, HTMLStencilElement {
    }
    var HTMLRtkIdleScreenElement: {
        prototype: HTMLRtkIdleScreenElement;
        new (): HTMLRtkIdleScreenElement;
    };
    interface HTMLRtkImageMessageElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A component which renders an image message from chat.
     */
    interface HTMLRtkImageMessageElement extends Components.RtkImageMessage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkImageMessageElementEventMap>(type: K, listener: (this: HTMLRtkImageMessageElement, ev: RtkImageMessageCustomEvent<HTMLRtkImageMessageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkImageMessageElementEventMap>(type: K, listener: (this: HTMLRtkImageMessageElement, ev: RtkImageMessageCustomEvent<HTMLRtkImageMessageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkImageMessageElement: {
        prototype: HTMLRtkImageMessageElement;
        new (): HTMLRtkImageMessageElement;
    };
    interface HTMLRtkImageMessageViewElementEventMap {
        "preview": string;
    }
    /**
     * A component which renders an image message.
     */
    interface HTMLRtkImageMessageViewElement extends Components.RtkImageMessageView, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkImageMessageViewElementEventMap>(type: K, listener: (this: HTMLRtkImageMessageViewElement, ev: RtkImageMessageViewCustomEvent<HTMLRtkImageMessageViewElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkImageMessageViewElementEventMap>(type: K, listener: (this: HTMLRtkImageMessageViewElement, ev: RtkImageMessageViewCustomEvent<HTMLRtkImageMessageViewElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkImageMessageViewElement: {
        prototype: HTMLRtkImageMessageViewElement;
        new (): HTMLRtkImageMessageViewElement;
    };
    interface HTMLRtkImageViewerElementEventMap {
        "close": void;
    }
    /**
     * A component which shows an image sent via chat.
     */
    interface HTMLRtkImageViewerElement extends Components.RtkImageViewer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkImageViewerElementEventMap>(type: K, listener: (this: HTMLRtkImageViewerElement, ev: RtkImageViewerCustomEvent<HTMLRtkImageViewerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkImageViewerElementEventMap>(type: K, listener: (this: HTMLRtkImageViewerElement, ev: RtkImageViewerCustomEvent<HTMLRtkImageViewerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkImageViewerElement: {
        prototype: HTMLRtkImageViewerElement;
        new (): HTMLRtkImageViewerElement;
    };
    interface HTMLRtkInformationTooltipElement extends Components.RtkInformationTooltip, HTMLStencilElement {
    }
    var HTMLRtkInformationTooltipElement: {
        prototype: HTMLRtkInformationTooltipElement;
        new (): HTMLRtkInformationTooltipElement;
    };
    interface HTMLRtkJoinStageElementEventMap {
        "rtkStateUpdate": States;
        "rtkJoinStage": void;
        "rtkLeaveStage": void;
    }
    interface HTMLRtkJoinStageElement extends Components.RtkJoinStage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkJoinStageElementEventMap>(type: K, listener: (this: HTMLRtkJoinStageElement, ev: RtkJoinStageCustomEvent<HTMLRtkJoinStageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkJoinStageElementEventMap>(type: K, listener: (this: HTMLRtkJoinStageElement, ev: RtkJoinStageCustomEvent<HTMLRtkJoinStageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkJoinStageElement: {
        prototype: HTMLRtkJoinStageElement;
        new (): HTMLRtkJoinStageElement;
    };
    interface HTMLRtkLeaveButtonElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A button which toggles visilibility of the leave confirmation dialog.
     */
    interface HTMLRtkLeaveButtonElement extends Components.RtkLeaveButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkLeaveButtonElementEventMap>(type: K, listener: (this: HTMLRtkLeaveButtonElement, ev: RtkLeaveButtonCustomEvent<HTMLRtkLeaveButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkLeaveButtonElementEventMap>(type: K, listener: (this: HTMLRtkLeaveButtonElement, ev: RtkLeaveButtonCustomEvent<HTMLRtkLeaveButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkLeaveButtonElement: {
        prototype: HTMLRtkLeaveButtonElement;
        new (): HTMLRtkLeaveButtonElement;
    };
    interface HTMLRtkLeaveMeetingElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A component which allows you to leave a meeting or
     * end meeting for all, if you have the permission.
     */
    interface HTMLRtkLeaveMeetingElement extends Components.RtkLeaveMeeting, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkLeaveMeetingElementEventMap>(type: K, listener: (this: HTMLRtkLeaveMeetingElement, ev: RtkLeaveMeetingCustomEvent<HTMLRtkLeaveMeetingElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkLeaveMeetingElementEventMap>(type: K, listener: (this: HTMLRtkLeaveMeetingElement, ev: RtkLeaveMeetingCustomEvent<HTMLRtkLeaveMeetingElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkLeaveMeetingElement: {
        prototype: HTMLRtkLeaveMeetingElement;
        new (): HTMLRtkLeaveMeetingElement;
    };
    interface HTMLRtkLivestreamIndicatorElement extends Components.RtkLivestreamIndicator, HTMLStencilElement {
    }
    var HTMLRtkLivestreamIndicatorElement: {
        prototype: HTMLRtkLivestreamIndicatorElement;
        new (): HTMLRtkLivestreamIndicatorElement;
    };
    interface HTMLRtkLivestreamPlayerElementEventMap {
        "rtkApiError": {
    trace: string;
    message: string;
  };
    }
    interface HTMLRtkLivestreamPlayerElement extends Components.RtkLivestreamPlayer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkLivestreamPlayerElementEventMap>(type: K, listener: (this: HTMLRtkLivestreamPlayerElement, ev: RtkLivestreamPlayerCustomEvent<HTMLRtkLivestreamPlayerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkLivestreamPlayerElementEventMap>(type: K, listener: (this: HTMLRtkLivestreamPlayerElement, ev: RtkLivestreamPlayerCustomEvent<HTMLRtkLivestreamPlayerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkLivestreamPlayerElement: {
        prototype: HTMLRtkLivestreamPlayerElement;
        new (): HTMLRtkLivestreamPlayerElement;
    };
    interface HTMLRtkLivestreamToggleElementEventMap {
        "rtkStateUpdate": States1;
        "rtkApiError": {
    trace: string;
    message: string;
  };
    }
    interface HTMLRtkLivestreamToggleElement extends Components.RtkLivestreamToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkLivestreamToggleElementEventMap>(type: K, listener: (this: HTMLRtkLivestreamToggleElement, ev: RtkLivestreamToggleCustomEvent<HTMLRtkLivestreamToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkLivestreamToggleElementEventMap>(type: K, listener: (this: HTMLRtkLivestreamToggleElement, ev: RtkLivestreamToggleCustomEvent<HTMLRtkLivestreamToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkLivestreamToggleElement: {
        prototype: HTMLRtkLivestreamToggleElement;
        new (): HTMLRtkLivestreamToggleElement;
    };
    /**
     * A component which loads the logo from your config, or via the `logo-url` attribute.
     */
    interface HTMLRtkLogoElement extends Components.RtkLogo, HTMLStencilElement {
    }
    var HTMLRtkLogoElement: {
        prototype: HTMLRtkLogoElement;
        new (): HTMLRtkLogoElement;
    };
    interface HTMLRtkMarkdownViewElement extends Components.RtkMarkdownView, HTMLStencilElement {
    }
    var HTMLRtkMarkdownViewElement: {
        prototype: HTMLRtkMarkdownViewElement;
        new (): HTMLRtkMarkdownViewElement;
    };
    interface HTMLRtkMeetingElementEventMap {
        "rtkStatesUpdate": States;
    }
    /**
     * A single component which renders an entire meeting UI.
     * It loads your preset and renders the UI based on it.
     * With this component, you don't have to handle all the states,
     * dialogs and other smaller bits of managing the application.
     */
    interface HTMLRtkMeetingElement extends Components.RtkMeeting, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkMeetingElementEventMap>(type: K, listener: (this: HTMLRtkMeetingElement, ev: RtkMeetingCustomEvent<HTMLRtkMeetingElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkMeetingElementEventMap>(type: K, listener: (this: HTMLRtkMeetingElement, ev: RtkMeetingCustomEvent<HTMLRtkMeetingElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkMeetingElement: {
        prototype: HTMLRtkMeetingElement;
        new (): HTMLRtkMeetingElement;
    };
    /**
     * Displays the title of the meeting.
     */
    interface HTMLRtkMeetingTitleElement extends Components.RtkMeetingTitle, HTMLStencilElement {
    }
    var HTMLRtkMeetingTitleElement: {
        prototype: HTMLRtkMeetingTitleElement;
        new (): HTMLRtkMeetingTitleElement;
    };
    /**
     * A menu component.
     */
    interface HTMLRtkMenuElement extends Components.RtkMenu, HTMLStencilElement {
    }
    var HTMLRtkMenuElement: {
        prototype: HTMLRtkMenuElement;
        new (): HTMLRtkMenuElement;
    };
    /**
     * A menu item component.
     */
    interface HTMLRtkMenuItemElement extends Components.RtkMenuItem, HTMLStencilElement {
    }
    var HTMLRtkMenuItemElement: {
        prototype: HTMLRtkMenuItemElement;
        new (): HTMLRtkMenuItemElement;
    };
    /**
     * A menu list component.
     */
    interface HTMLRtkMenuListElement extends Components.RtkMenuList, HTMLStencilElement {
    }
    var HTMLRtkMenuListElement: {
        prototype: HTMLRtkMenuListElement;
        new (): HTMLRtkMenuListElement;
    };
    /**
     * A component which renders list of messages.
     */
    interface HTMLRtkMessageListViewElement extends Components.RtkMessageListView, HTMLStencilElement {
    }
    var HTMLRtkMessageListViewElement: {
        prototype: HTMLRtkMessageListViewElement;
        new (): HTMLRtkMessageListViewElement;
    };
    interface HTMLRtkMessageViewElementEventMap {
        "action": string;
    }
    interface HTMLRtkMessageViewElement extends Components.RtkMessageView, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkMessageViewElementEventMap>(type: K, listener: (this: HTMLRtkMessageViewElement, ev: RtkMessageViewCustomEvent<HTMLRtkMessageViewElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkMessageViewElementEventMap>(type: K, listener: (this: HTMLRtkMessageViewElement, ev: RtkMessageViewCustomEvent<HTMLRtkMessageViewElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkMessageViewElement: {
        prototype: HTMLRtkMessageViewElement;
        new (): HTMLRtkMessageViewElement;
    };
    interface HTMLRtkMicToggleElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A button which toggles your microphone.
     */
    interface HTMLRtkMicToggleElement extends Components.RtkMicToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkMicToggleElementEventMap>(type: K, listener: (this: HTMLRtkMicToggleElement, ev: RtkMicToggleCustomEvent<HTMLRtkMicToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkMicToggleElementEventMap>(type: K, listener: (this: HTMLRtkMicToggleElement, ev: RtkMicToggleCustomEvent<HTMLRtkMicToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkMicToggleElement: {
        prototype: HTMLRtkMicToggleElement;
        new (): HTMLRtkMicToggleElement;
    };
    /**
     * A component which lets to manage your audio devices and audio preferences.
     * Emits `rtkStateUpdate` event with data for muting notification sounds:
     * ```ts
     * {
     *  prefs: {
     *    muteNotificationSounds: boolean
     *  }
     * }
     * ```
     */
    interface HTMLRtkMicrophoneSelectorElement extends Components.RtkMicrophoneSelector, HTMLStencilElement {
    }
    var HTMLRtkMicrophoneSelectorElement: {
        prototype: HTMLRtkMicrophoneSelectorElement;
        new (): HTMLRtkMicrophoneSelectorElement;
    };
    /**
     * A grid component which handles screenshares, plugins and participants.
     */
    interface HTMLRtkMixedGridElement extends Components.RtkMixedGrid, HTMLStencilElement {
    }
    var HTMLRtkMixedGridElement: {
        prototype: HTMLRtkMixedGridElement;
        new (): HTMLRtkMixedGridElement;
    };
    interface HTMLRtkMoreToggleElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A button which toggles visibility of a more menu.
     * When clicked it emits a `rtkStateUpdate` event with the data:
     * ```ts
     * { activeMoreMenu: boolean; }
     * ```
     */
    interface HTMLRtkMoreToggleElement extends Components.RtkMoreToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkMoreToggleElementEventMap>(type: K, listener: (this: HTMLRtkMoreToggleElement, ev: RtkMoreToggleCustomEvent<HTMLRtkMoreToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkMoreToggleElementEventMap>(type: K, listener: (this: HTMLRtkMoreToggleElement, ev: RtkMoreToggleCustomEvent<HTMLRtkMoreToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkMoreToggleElement: {
        prototype: HTMLRtkMoreToggleElement;
        new (): HTMLRtkMoreToggleElement;
    };
    interface HTMLRtkMuteAllButtonElementEventMap {
        "rtkStateUpdate": States1;
    }
    interface HTMLRtkMuteAllButtonElement extends Components.RtkMuteAllButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkMuteAllButtonElementEventMap>(type: K, listener: (this: HTMLRtkMuteAllButtonElement, ev: RtkMuteAllButtonCustomEvent<HTMLRtkMuteAllButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkMuteAllButtonElementEventMap>(type: K, listener: (this: HTMLRtkMuteAllButtonElement, ev: RtkMuteAllButtonCustomEvent<HTMLRtkMuteAllButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkMuteAllButtonElement: {
        prototype: HTMLRtkMuteAllButtonElement;
        new (): HTMLRtkMuteAllButtonElement;
    };
    interface HTMLRtkMuteAllConfirmationElementEventMap {
        "rtkStateUpdate": States;
    }
    interface HTMLRtkMuteAllConfirmationElement extends Components.RtkMuteAllConfirmation, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkMuteAllConfirmationElementEventMap>(type: K, listener: (this: HTMLRtkMuteAllConfirmationElement, ev: RtkMuteAllConfirmationCustomEvent<HTMLRtkMuteAllConfirmationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkMuteAllConfirmationElementEventMap>(type: K, listener: (this: HTMLRtkMuteAllConfirmationElement, ev: RtkMuteAllConfirmationCustomEvent<HTMLRtkMuteAllConfirmationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkMuteAllConfirmationElement: {
        prototype: HTMLRtkMuteAllConfirmationElement;
        new (): HTMLRtkMuteAllConfirmationElement;
    };
    /**
     * A component which shows a participant's name.
     */
    interface HTMLRtkNameTagElement extends Components.RtkNameTag, HTMLStencilElement {
    }
    var HTMLRtkNameTagElement: {
        prototype: HTMLRtkNameTagElement;
        new (): HTMLRtkNameTagElement;
    };
    interface HTMLRtkNetworkIndicatorElement extends Components.RtkNetworkIndicator, HTMLStencilElement {
    }
    var HTMLRtkNetworkIndicatorElement: {
        prototype: HTMLRtkNetworkIndicatorElement;
        new (): HTMLRtkNetworkIndicatorElement;
    };
    interface HTMLRtkNotificationElementEventMap {
        "rtkNotificationDismiss": string;
    }
    /**
     * A component which shows a notification.
     * You need to remove the element after you receive the
     * `rtkNotificationDismiss` event.
     */
    interface HTMLRtkNotificationElement extends Components.RtkNotification, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkNotificationElementEventMap>(type: K, listener: (this: HTMLRtkNotificationElement, ev: RtkNotificationCustomEvent<HTMLRtkNotificationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkNotificationElementEventMap>(type: K, listener: (this: HTMLRtkNotificationElement, ev: RtkNotificationCustomEvent<HTMLRtkNotificationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkNotificationElement: {
        prototype: HTMLRtkNotificationElement;
        new (): HTMLRtkNotificationElement;
    };
    /**
     * A component which handles notifications.
     * You can configure which notifications you want to see and which ones you want to hear.
     * There are also certain limits which you can set as well.
     */
    interface HTMLRtkNotificationsElement extends Components.RtkNotifications, HTMLStencilElement {
    }
    var HTMLRtkNotificationsElement: {
        prototype: HTMLRtkNotificationsElement;
        new (): HTMLRtkNotificationsElement;
    };
    interface HTMLRtkOverlayModalElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A confirmation modal.
     */
    interface HTMLRtkOverlayModalElement extends Components.RtkOverlayModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkOverlayModalElementEventMap>(type: K, listener: (this: HTMLRtkOverlayModalElement, ev: RtkOverlayModalCustomEvent<HTMLRtkOverlayModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkOverlayModalElementEventMap>(type: K, listener: (this: HTMLRtkOverlayModalElement, ev: RtkOverlayModalCustomEvent<HTMLRtkOverlayModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkOverlayModalElement: {
        prototype: HTMLRtkOverlayModalElement;
        new (): HTMLRtkOverlayModalElement;
    };
    interface HTMLRtkPaginatedListElement extends Components.RtkPaginatedList, HTMLStencilElement {
    }
    var HTMLRtkPaginatedListElement: {
        prototype: HTMLRtkPaginatedListElement;
        new (): HTMLRtkPaginatedListElement;
    };
    interface HTMLRtkParticipantElementEventMap {
        "rtkSendNotification": {
    trace: string;
    message: string;
  };
    }
    /**
     * A participant entry component used inside `rtk-participants` which shows data like:
     * name, picture and media device status.
     * You can perform privileged actions on the participant too.
     */
    interface HTMLRtkParticipantElement extends Components.RtkParticipant, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkParticipantElementEventMap>(type: K, listener: (this: HTMLRtkParticipantElement, ev: RtkParticipantCustomEvent<HTMLRtkParticipantElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkParticipantElementEventMap>(type: K, listener: (this: HTMLRtkParticipantElement, ev: RtkParticipantCustomEvent<HTMLRtkParticipantElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkParticipantElement: {
        prototype: HTMLRtkParticipantElement;
        new (): HTMLRtkParticipantElement;
    };
    /**
     * A component which shows count of total joined participants in a meeting.
     */
    interface HTMLRtkParticipantCountElement extends Components.RtkParticipantCount, HTMLStencilElement {
    }
    var HTMLRtkParticipantCountElement: {
        prototype: HTMLRtkParticipantCountElement;
        new (): HTMLRtkParticipantCountElement;
    };
    interface HTMLRtkParticipantSetupElement extends Components.RtkParticipantSetup, HTMLStencilElement {
    }
    var HTMLRtkParticipantSetupElement: {
        prototype: HTMLRtkParticipantSetupElement;
        new (): HTMLRtkParticipantSetupElement;
    };
    interface HTMLRtkParticipantTileElementEventMap {
        "tileLoad": { participant: Peer; videoElement: HTMLVideoElement };
        "tileUnload": Peer;
    }
    /**
     * A component which plays a participants video and allows for placement
     * of components like `rtk-name-tag`, `rtk-audio-visualizer` or any other component.
     */
    interface HTMLRtkParticipantTileElement extends Components.RtkParticipantTile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkParticipantTileElementEventMap>(type: K, listener: (this: HTMLRtkParticipantTileElement, ev: RtkParticipantTileCustomEvent<HTMLRtkParticipantTileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkParticipantTileElementEventMap>(type: K, listener: (this: HTMLRtkParticipantTileElement, ev: RtkParticipantTileCustomEvent<HTMLRtkParticipantTileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkParticipantTileElement: {
        prototype: HTMLRtkParticipantTileElement;
        new (): HTMLRtkParticipantTileElement;
    };
    interface HTMLRtkParticipantsElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A component which lists all participants, with ability to
     * run privileged actions on each participant according to your permissions.
     */
    interface HTMLRtkParticipantsElement extends Components.RtkParticipants, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkParticipantsElementEventMap>(type: K, listener: (this: HTMLRtkParticipantsElement, ev: RtkParticipantsCustomEvent<HTMLRtkParticipantsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkParticipantsElementEventMap>(type: K, listener: (this: HTMLRtkParticipantsElement, ev: RtkParticipantsCustomEvent<HTMLRtkParticipantsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkParticipantsElement: {
        prototype: HTMLRtkParticipantsElement;
        new (): HTMLRtkParticipantsElement;
    };
    interface HTMLRtkParticipantsAudioElementEventMap {
        "dialogClose": void;
    }
    /**
     * A component which plays all the audio from participants and screenshares.
     */
    interface HTMLRtkParticipantsAudioElement extends Components.RtkParticipantsAudio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkParticipantsAudioElementEventMap>(type: K, listener: (this: HTMLRtkParticipantsAudioElement, ev: RtkParticipantsAudioCustomEvent<HTMLRtkParticipantsAudioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkParticipantsAudioElementEventMap>(type: K, listener: (this: HTMLRtkParticipantsAudioElement, ev: RtkParticipantsAudioCustomEvent<HTMLRtkParticipantsAudioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkParticipantsAudioElement: {
        prototype: HTMLRtkParticipantsAudioElement;
        new (): HTMLRtkParticipantsAudioElement;
    };
    /**
     * A component which lists all participants, with ability to
     * run privileged actions on each participant according to your permissions.
     */
    interface HTMLRtkParticipantsStageListElement extends Components.RtkParticipantsStageList, HTMLStencilElement {
    }
    var HTMLRtkParticipantsStageListElement: {
        prototype: HTMLRtkParticipantsStageListElement;
        new (): HTMLRtkParticipantsStageListElement;
    };
    interface HTMLRtkParticipantsStageQueueElement extends Components.RtkParticipantsStageQueue, HTMLStencilElement {
    }
    var HTMLRtkParticipantsStageQueueElement: {
        prototype: HTMLRtkParticipantsStageQueueElement;
        new (): HTMLRtkParticipantsStageQueueElement;
    };
    interface HTMLRtkParticipantsToggleElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A button which toggles visibility of participants.
     * When clicked it emits a `rtkStateUpdate` event with the data:
     * ```ts
     * { activeSidebar: boolean; sidebar: 'participants' }
     * ```
     */
    interface HTMLRtkParticipantsToggleElement extends Components.RtkParticipantsToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkParticipantsToggleElementEventMap>(type: K, listener: (this: HTMLRtkParticipantsToggleElement, ev: RtkParticipantsToggleCustomEvent<HTMLRtkParticipantsToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkParticipantsToggleElementEventMap>(type: K, listener: (this: HTMLRtkParticipantsToggleElement, ev: RtkParticipantsToggleCustomEvent<HTMLRtkParticipantsToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkParticipantsToggleElement: {
        prototype: HTMLRtkParticipantsToggleElement;
        new (): HTMLRtkParticipantsToggleElement;
    };
    interface HTMLRtkParticipantsViewerListElement extends Components.RtkParticipantsViewerList, HTMLStencilElement {
    }
    var HTMLRtkParticipantsViewerListElement: {
        prototype: HTMLRtkParticipantsViewerListElement;
        new (): HTMLRtkParticipantsViewerListElement;
    };
    interface HTMLRtkParticipantsWaitingListElement extends Components.RtkParticipantsWaitingList, HTMLStencilElement {
    }
    var HTMLRtkParticipantsWaitingListElement: {
        prototype: HTMLRtkParticipantsWaitingListElement;
        new (): HTMLRtkParticipantsWaitingListElement;
    };
    interface HTMLRtkPermissionsMessageElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A component which shows permission related troubleshooting
     * information.
     */
    interface HTMLRtkPermissionsMessageElement extends Components.RtkPermissionsMessage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkPermissionsMessageElementEventMap>(type: K, listener: (this: HTMLRtkPermissionsMessageElement, ev: RtkPermissionsMessageCustomEvent<HTMLRtkPermissionsMessageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkPermissionsMessageElementEventMap>(type: K, listener: (this: HTMLRtkPermissionsMessageElement, ev: RtkPermissionsMessageCustomEvent<HTMLRtkPermissionsMessageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkPermissionsMessageElement: {
        prototype: HTMLRtkPermissionsMessageElement;
        new (): HTMLRtkPermissionsMessageElement;
    };
    interface HTMLRtkPipToggleElementEventMap {
        "rtkStateUpdate": States1;
    }
    interface HTMLRtkPipToggleElement extends Components.RtkPipToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkPipToggleElementEventMap>(type: K, listener: (this: HTMLRtkPipToggleElement, ev: RtkPipToggleCustomEvent<HTMLRtkPipToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkPipToggleElementEventMap>(type: K, listener: (this: HTMLRtkPipToggleElement, ev: RtkPipToggleCustomEvent<HTMLRtkPipToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkPipToggleElement: {
        prototype: HTMLRtkPipToggleElement;
        new (): HTMLRtkPipToggleElement;
    };
    /**
     * A component which loads a plugin.
     */
    interface HTMLRtkPluginMainElement extends Components.RtkPluginMain, HTMLStencilElement {
    }
    var HTMLRtkPluginMainElement: {
        prototype: HTMLRtkPluginMainElement;
        new (): HTMLRtkPluginMainElement;
    };
    interface HTMLRtkPluginsElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A component which lists all available plugins from their preset,
     * and ability to enable or disable plugins.
     */
    interface HTMLRtkPluginsElement extends Components.RtkPlugins, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkPluginsElementEventMap>(type: K, listener: (this: HTMLRtkPluginsElement, ev: RtkPluginsCustomEvent<HTMLRtkPluginsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkPluginsElementEventMap>(type: K, listener: (this: HTMLRtkPluginsElement, ev: RtkPluginsCustomEvent<HTMLRtkPluginsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkPluginsElement: {
        prototype: HTMLRtkPluginsElement;
        new (): HTMLRtkPluginsElement;
    };
    interface HTMLRtkPluginsToggleElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A button which toggles visibility of plugins.
     * When clicked it emits a `rtkStateUpdate` event with the data:
     * ```ts
     * { activeSidebar: boolean; sidebar: 'plugins' }
     * ```
     */
    interface HTMLRtkPluginsToggleElement extends Components.RtkPluginsToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkPluginsToggleElementEventMap>(type: K, listener: (this: HTMLRtkPluginsToggleElement, ev: RtkPluginsToggleCustomEvent<HTMLRtkPluginsToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkPluginsToggleElementEventMap>(type: K, listener: (this: HTMLRtkPluginsToggleElement, ev: RtkPluginsToggleCustomEvent<HTMLRtkPluginsToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkPluginsToggleElement: {
        prototype: HTMLRtkPluginsToggleElement;
        new (): HTMLRtkPluginsToggleElement;
    };
    interface HTMLRtkPollElementEventMap {
        "rtkVotePoll": {
    id: string;
    index: number;
  };
    }
    /**
     * A poll component.
     * Shows a poll where a user can vote.
     */
    interface HTMLRtkPollElement extends Components.RtkPoll, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkPollElementEventMap>(type: K, listener: (this: HTMLRtkPollElement, ev: RtkPollCustomEvent<HTMLRtkPollElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkPollElementEventMap>(type: K, listener: (this: HTMLRtkPollElement, ev: RtkPollCustomEvent<HTMLRtkPollElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkPollElement: {
        prototype: HTMLRtkPollElement;
        new (): HTMLRtkPollElement;
    };
    interface HTMLRtkPollFormElementEventMap {
        "rtkCreatePoll": PollObject;
    }
    /**
     * A component that lets you create a poll.
     */
    interface HTMLRtkPollFormElement extends Components.RtkPollForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkPollFormElementEventMap>(type: K, listener: (this: HTMLRtkPollFormElement, ev: RtkPollFormCustomEvent<HTMLRtkPollFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkPollFormElementEventMap>(type: K, listener: (this: HTMLRtkPollFormElement, ev: RtkPollFormCustomEvent<HTMLRtkPollFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkPollFormElement: {
        prototype: HTMLRtkPollFormElement;
        new (): HTMLRtkPollFormElement;
    };
    /**
     * A component which lists all available plugins a user can access with
     * the ability to enable or disable them as per their permissions.
     */
    interface HTMLRtkPollsElement extends Components.RtkPolls, HTMLStencilElement {
    }
    var HTMLRtkPollsElement: {
        prototype: HTMLRtkPollsElement;
        new (): HTMLRtkPollsElement;
    };
    interface HTMLRtkPollsToggleElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A button which toggles visibility of polls.
     * You need to pass the `meeting` object to it to see the unread polls count badge.
     * When clicked it emits a `rtkStateUpdate` event with the data:
     * ```ts
     * { activeSidebar: boolean; sidebar: 'polls' }
     * ```
     */
    interface HTMLRtkPollsToggleElement extends Components.RtkPollsToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkPollsToggleElementEventMap>(type: K, listener: (this: HTMLRtkPollsToggleElement, ev: RtkPollsToggleCustomEvent<HTMLRtkPollsToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkPollsToggleElementEventMap>(type: K, listener: (this: HTMLRtkPollsToggleElement, ev: RtkPollsToggleCustomEvent<HTMLRtkPollsToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkPollsToggleElement: {
        prototype: HTMLRtkPollsToggleElement;
        new (): HTMLRtkPollsToggleElement;
    };
    /**
     * A component which indicates the recording status of a meeting.
     * It will not render anything if no recording is taking place.
     */
    interface HTMLRtkRecordingIndicatorElement extends Components.RtkRecordingIndicator, HTMLStencilElement {
    }
    var HTMLRtkRecordingIndicatorElement: {
        prototype: HTMLRtkRecordingIndicatorElement;
        new (): HTMLRtkRecordingIndicatorElement;
    };
    interface HTMLRtkRecordingToggleElementEventMap {
        "rtkApiError": {
    trace: string;
    message: string;
  };
    }
    /**
     * A button which toggles recording state of a meeting.
     * Only a privileged user can perform this action,
     * thus the button will not be visible for participants
     * who don't have the permission to record a meeting.
     */
    interface HTMLRtkRecordingToggleElement extends Components.RtkRecordingToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkRecordingToggleElementEventMap>(type: K, listener: (this: HTMLRtkRecordingToggleElement, ev: RtkRecordingToggleCustomEvent<HTMLRtkRecordingToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkRecordingToggleElementEventMap>(type: K, listener: (this: HTMLRtkRecordingToggleElement, ev: RtkRecordingToggleCustomEvent<HTMLRtkRecordingToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkRecordingToggleElement: {
        prototype: HTMLRtkRecordingToggleElement;
        new (): HTMLRtkRecordingToggleElement;
    };
    interface HTMLRtkScreenShareToggleElementEventMap {
        "rtkStateUpdate": States;
        "rtkApiError": {
    trace: string;
    message: string;
  };
    }
    /**
     * A button which toggles your screenshare.
     */
    interface HTMLRtkScreenShareToggleElement extends Components.RtkScreenShareToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkScreenShareToggleElementEventMap>(type: K, listener: (this: HTMLRtkScreenShareToggleElement, ev: RtkScreenShareToggleCustomEvent<HTMLRtkScreenShareToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkScreenShareToggleElementEventMap>(type: K, listener: (this: HTMLRtkScreenShareToggleElement, ev: RtkScreenShareToggleCustomEvent<HTMLRtkScreenShareToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkScreenShareToggleElement: {
        prototype: HTMLRtkScreenShareToggleElement;
        new (): HTMLRtkScreenShareToggleElement;
    };
    interface HTMLRtkScreenshareViewElementEventMap {
        "rtkStateUpdate": States;
        "screensharePlay": {
    participant: Peer;
    screenshareParticipant: Peer;
  };
    }
    /**
     * A component which plays a participant's screenshared video.
     * It also allows for placement of other components similar to `rtk-participant-tile`.
     * This component will not render anything if the participant hasn't start screensharing.
     */
    interface HTMLRtkScreenshareViewElement extends Components.RtkScreenshareView, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkScreenshareViewElementEventMap>(type: K, listener: (this: HTMLRtkScreenshareViewElement, ev: RtkScreenshareViewCustomEvent<HTMLRtkScreenshareViewElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkScreenshareViewElementEventMap>(type: K, listener: (this: HTMLRtkScreenshareViewElement, ev: RtkScreenshareViewCustomEvent<HTMLRtkScreenshareViewElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkScreenshareViewElement: {
        prototype: HTMLRtkScreenshareViewElement;
        new (): HTMLRtkScreenshareViewElement;
    };
    interface HTMLRtkSettingsElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A settings component to see and change your audio/video devices
     * as well as see your connection quality.
     */
    interface HTMLRtkSettingsElement extends Components.RtkSettings, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkSettingsElementEventMap>(type: K, listener: (this: HTMLRtkSettingsElement, ev: RtkSettingsCustomEvent<HTMLRtkSettingsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkSettingsElementEventMap>(type: K, listener: (this: HTMLRtkSettingsElement, ev: RtkSettingsCustomEvent<HTMLRtkSettingsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkSettingsElement: {
        prototype: HTMLRtkSettingsElement;
        new (): HTMLRtkSettingsElement;
    };
    interface HTMLRtkSettingsAudioElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A component which lets to manage your audio devices and audio preferences.
     * Emits `rtkStateUpdate` event with data for muting notification sounds:
     * ```ts
     * {
     *  prefs: {
     *    muteNotificationSounds: boolean
     *  }
     * }
     * ```
     */
    interface HTMLRtkSettingsAudioElement extends Components.RtkSettingsAudio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkSettingsAudioElementEventMap>(type: K, listener: (this: HTMLRtkSettingsAudioElement, ev: RtkSettingsAudioCustomEvent<HTMLRtkSettingsAudioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkSettingsAudioElementEventMap>(type: K, listener: (this: HTMLRtkSettingsAudioElement, ev: RtkSettingsAudioCustomEvent<HTMLRtkSettingsAudioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkSettingsAudioElement: {
        prototype: HTMLRtkSettingsAudioElement;
        new (): HTMLRtkSettingsAudioElement;
    };
    interface HTMLRtkSettingsToggleElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A button which toggles visibility of settings module.
     * When clicked it emits a `rtkStateUpdate` event with the data:
     * ```ts
     * { activeSettings: boolean; }
     * ```
     */
    interface HTMLRtkSettingsToggleElement extends Components.RtkSettingsToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkSettingsToggleElementEventMap>(type: K, listener: (this: HTMLRtkSettingsToggleElement, ev: RtkSettingsToggleCustomEvent<HTMLRtkSettingsToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkSettingsToggleElementEventMap>(type: K, listener: (this: HTMLRtkSettingsToggleElement, ev: RtkSettingsToggleCustomEvent<HTMLRtkSettingsToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkSettingsToggleElement: {
        prototype: HTMLRtkSettingsToggleElement;
        new (): HTMLRtkSettingsToggleElement;
    };
    interface HTMLRtkSettingsVideoElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A component which lets to manage your camera devices and your video preferences.
     * Emits `rtkStateUpdate` event with data for toggling mirroring of self video:
     * ```ts
     * {
     *  prefs: {
     *    mirrorVideo: boolean
     *  }
     * }
     * ```
     */
    interface HTMLRtkSettingsVideoElement extends Components.RtkSettingsVideo, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkSettingsVideoElementEventMap>(type: K, listener: (this: HTMLRtkSettingsVideoElement, ev: RtkSettingsVideoCustomEvent<HTMLRtkSettingsVideoElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkSettingsVideoElementEventMap>(type: K, listener: (this: HTMLRtkSettingsVideoElement, ev: RtkSettingsVideoCustomEvent<HTMLRtkSettingsVideoElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkSettingsVideoElement: {
        prototype: HTMLRtkSettingsVideoElement;
        new (): HTMLRtkSettingsVideoElement;
    };
    interface HTMLRtkSetupScreenElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A screen shown before joining the meeting, where you can edit your display name,
     * and media settings.
     */
    interface HTMLRtkSetupScreenElement extends Components.RtkSetupScreen, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkSetupScreenElementEventMap>(type: K, listener: (this: HTMLRtkSetupScreenElement, ev: RtkSetupScreenCustomEvent<HTMLRtkSetupScreenElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkSetupScreenElementEventMap>(type: K, listener: (this: HTMLRtkSetupScreenElement, ev: RtkSetupScreenCustomEvent<HTMLRtkSetupScreenElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkSetupScreenElement: {
        prototype: HTMLRtkSetupScreenElement;
        new (): HTMLRtkSetupScreenElement;
    };
    interface HTMLRtkSidebarElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A component which handles the sidebar and
     * you can customize which sections you want, and which section you want as the default.
     */
    interface HTMLRtkSidebarElement extends Components.RtkSidebar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkSidebarElementEventMap>(type: K, listener: (this: HTMLRtkSidebarElement, ev: RtkSidebarCustomEvent<HTMLRtkSidebarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkSidebarElementEventMap>(type: K, listener: (this: HTMLRtkSidebarElement, ev: RtkSidebarCustomEvent<HTMLRtkSidebarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkSidebarElement: {
        prototype: HTMLRtkSidebarElement;
        new (): HTMLRtkSidebarElement;
    };
    interface HTMLRtkSidebarUiElementEventMap {
        "tabChange": string;
        "sidebarClose": void;
    }
    interface HTMLRtkSidebarUiElement extends Components.RtkSidebarUi, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkSidebarUiElementEventMap>(type: K, listener: (this: HTMLRtkSidebarUiElement, ev: RtkSidebarUiCustomEvent<HTMLRtkSidebarUiElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkSidebarUiElementEventMap>(type: K, listener: (this: HTMLRtkSidebarUiElement, ev: RtkSidebarUiCustomEvent<HTMLRtkSidebarUiElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkSidebarUiElement: {
        prototype: HTMLRtkSidebarUiElement;
        new (): HTMLRtkSidebarUiElement;
    };
    /**
     * A grid component which renders only the participants in a simple grid.
     */
    interface HTMLRtkSimpleGridElement extends Components.RtkSimpleGrid, HTMLStencilElement {
    }
    var HTMLRtkSimpleGridElement: {
        prototype: HTMLRtkSimpleGridElement;
        new (): HTMLRtkSimpleGridElement;
    };
    /**
     * A component which lets to manage your audio devices and audio preferences.
     * Emits `rtkStateUpdate` event with data for muting notification sounds:
     * ```ts
     * {
     *  prefs: {
     *    muteNotificationSounds: boolean
     *  }
     * }
     * ```
     */
    interface HTMLRtkSpeakerSelectorElement extends Components.RtkSpeakerSelector, HTMLStencilElement {
    }
    var HTMLRtkSpeakerSelectorElement: {
        prototype: HTMLRtkSpeakerSelectorElement;
        new (): HTMLRtkSpeakerSelectorElement;
    };
    /**
     * A component which shows an animating spinner.
     */
    interface HTMLRtkSpinnerElement extends Components.RtkSpinner, HTMLStencilElement {
    }
    var HTMLRtkSpinnerElement: {
        prototype: HTMLRtkSpinnerElement;
        new (): HTMLRtkSpinnerElement;
    };
    /**
     * A grid component that renders two lists of participants: `pinnedParticipants` and `participants`.
     * You can customize the layout to a `column` view, by default is is `row`.
     * - Participants from `pinnedParticipants[]` are rendered inside a larger grid.
     * - Participants from `participants[]` array are rendered in a smaller grid.
     */
    interface HTMLRtkSpotlightGridElement extends Components.RtkSpotlightGrid, HTMLStencilElement {
    }
    var HTMLRtkSpotlightGridElement: {
        prototype: HTMLRtkSpotlightGridElement;
        new (): HTMLRtkSpotlightGridElement;
    };
    interface HTMLRtkSpotlightIndicatorElement extends Components.RtkSpotlightIndicator, HTMLStencilElement {
    }
    var HTMLRtkSpotlightIndicatorElement: {
        prototype: HTMLRtkSpotlightIndicatorElement;
        new (): HTMLRtkSpotlightIndicatorElement;
    };
    interface HTMLRtkStageElementEventMap {
        "rtkStateUpdate": States;
    }
    /**
     * A component used as a stage that commonly houses
     * the `grid` and `sidebar` components.
     */
    interface HTMLRtkStageElement extends Components.RtkStage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkStageElementEventMap>(type: K, listener: (this: HTMLRtkStageElement, ev: RtkStageCustomEvent<HTMLRtkStageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkStageElementEventMap>(type: K, listener: (this: HTMLRtkStageElement, ev: RtkStageCustomEvent<HTMLRtkStageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkStageElement: {
        prototype: HTMLRtkStageElement;
        new (): HTMLRtkStageElement;
    };
    interface HTMLRtkStageToggleElementEventMap {
        "rtkStateUpdate": States1;
    }
    interface HTMLRtkStageToggleElement extends Components.RtkStageToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkStageToggleElementEventMap>(type: K, listener: (this: HTMLRtkStageToggleElement, ev: RtkStageToggleCustomEvent<HTMLRtkStageToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkStageToggleElementEventMap>(type: K, listener: (this: HTMLRtkStageToggleElement, ev: RtkStageToggleCustomEvent<HTMLRtkStageToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkStageToggleElement: {
        prototype: HTMLRtkStageToggleElement;
        new (): HTMLRtkStageToggleElement;
    };
    interface HTMLRtkSwitchElementEventMap {
        "rtkChange": boolean;
    }
    /**
     * A switch component which follows RTK Design System.
     */
    interface HTMLRtkSwitchElement extends Components.RtkSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkSwitchElementEventMap>(type: K, listener: (this: HTMLRtkSwitchElement, ev: RtkSwitchCustomEvent<HTMLRtkSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkSwitchElementEventMap>(type: K, listener: (this: HTMLRtkSwitchElement, ev: RtkSwitchCustomEvent<HTMLRtkSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkSwitchElement: {
        prototype: HTMLRtkSwitchElement;
        new (): HTMLRtkSwitchElement;
    };
    interface HTMLRtkTabBarElementEventMap {
        "tabChange": Tab;
    }
    interface HTMLRtkTabBarElement extends Components.RtkTabBar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkTabBarElementEventMap>(type: K, listener: (this: HTMLRtkTabBarElement, ev: RtkTabBarCustomEvent<HTMLRtkTabBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkTabBarElementEventMap>(type: K, listener: (this: HTMLRtkTabBarElement, ev: RtkTabBarCustomEvent<HTMLRtkTabBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkTabBarElement: {
        prototype: HTMLRtkTabBarElement;
        new (): HTMLRtkTabBarElement;
    };
    interface HTMLRtkTextComposerViewElementEventMap {
        "textChange": string;
    }
    /**
     * A component which renders a text composer
     */
    interface HTMLRtkTextComposerViewElement extends Components.RtkTextComposerView, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkTextComposerViewElementEventMap>(type: K, listener: (this: HTMLRtkTextComposerViewElement, ev: RtkTextComposerViewCustomEvent<HTMLRtkTextComposerViewElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkTextComposerViewElementEventMap>(type: K, listener: (this: HTMLRtkTextComposerViewElement, ev: RtkTextComposerViewCustomEvent<HTMLRtkTextComposerViewElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkTextComposerViewElement: {
        prototype: HTMLRtkTextComposerViewElement;
        new (): HTMLRtkTextComposerViewElement;
    };
    /**
     * A component which renders a text message from chat.
     */
    interface HTMLRtkTextMessageElement extends Components.RtkTextMessage, HTMLStencilElement {
    }
    var HTMLRtkTextMessageElement: {
        prototype: HTMLRtkTextMessageElement;
        new (): HTMLRtkTextMessageElement;
    };
    /**
     * A component which renders a text message from chat.
     */
    interface HTMLRtkTextMessageViewElement extends Components.RtkTextMessageView, HTMLStencilElement {
    }
    var HTMLRtkTextMessageViewElement: {
        prototype: HTMLRtkTextMessageViewElement;
        new (): HTMLRtkTextMessageViewElement;
    };
    interface HTMLRtkTooltipElementEventMap {
        "rtkOpenChange": boolean;
    }
    /**
     * Tooltip component which follows RTK Design System.
     */
    interface HTMLRtkTooltipElement extends Components.RtkTooltip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkTooltipElementEventMap>(type: K, listener: (this: HTMLRtkTooltipElement, ev: RtkTooltipCustomEvent<HTMLRtkTooltipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkTooltipElementEventMap>(type: K, listener: (this: HTMLRtkTooltipElement, ev: RtkTooltipCustomEvent<HTMLRtkTooltipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkTooltipElement: {
        prototype: HTMLRtkTooltipElement;
        new (): HTMLRtkTooltipElement;
    };
    interface HTMLRtkTranscriptElementEventMap {
        "rtkTranscriptDismiss": {
    id: string;
    renderedId: string;
  };
    }
    /**
     * A component which shows a transcript.
     * You need to remove the element after you receive the
     * `rtkTranscriptDismiss` event.
     */
    interface HTMLRtkTranscriptElement extends Components.RtkTranscript, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkTranscriptElementEventMap>(type: K, listener: (this: HTMLRtkTranscriptElement, ev: RtkTranscriptCustomEvent<HTMLRtkTranscriptElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkTranscriptElementEventMap>(type: K, listener: (this: HTMLRtkTranscriptElement, ev: RtkTranscriptCustomEvent<HTMLRtkTranscriptElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkTranscriptElement: {
        prototype: HTMLRtkTranscriptElement;
        new (): HTMLRtkTranscriptElement;
    };
    /**
     * A component which handles transcripts.
     * You can configure which transcripts you want to see and which ones you want to hear.
     * There are also certain limits which you can set as well.
     */
    interface HTMLRtkTranscriptsElement extends Components.RtkTranscripts, HTMLStencilElement {
    }
    var HTMLRtkTranscriptsElement: {
        prototype: HTMLRtkTranscriptsElement;
        new (): HTMLRtkTranscriptsElement;
    };
    interface HTMLRtkUiProviderElementEventMap {
        "rtkStatesUpdate": States1;
    }
    interface HTMLRtkUiProviderElement extends Components.RtkUiProvider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLRtkUiProviderElementEventMap>(type: K, listener: (this: HTMLRtkUiProviderElement, ev: RtkUiProviderCustomEvent<HTMLRtkUiProviderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLRtkUiProviderElementEventMap>(type: K, listener: (this: HTMLRtkUiProviderElement, ev: RtkUiProviderCustomEvent<HTMLRtkUiProviderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLRtkUiProviderElement: {
        prototype: HTMLRtkUiProviderElement;
        new (): HTMLRtkUiProviderElement;
    };
    /**
     * A component which shows count of total joined participants in a meeting.
     */
    interface HTMLRtkViewerCountElement extends Components.RtkViewerCount, HTMLStencilElement {
    }
    var HTMLRtkViewerCountElement: {
        prototype: HTMLRtkViewerCountElement;
        new (): HTMLRtkViewerCountElement;
    };
    interface HTMLRtkVirtualizedParticipantListElement extends Components.RtkVirtualizedParticipantList, HTMLStencilElement {
    }
    var HTMLRtkVirtualizedParticipantListElement: {
        prototype: HTMLRtkVirtualizedParticipantListElement;
        new (): HTMLRtkVirtualizedParticipantListElement;
    };
    interface HTMLRtkWaitingScreenElement extends Components.RtkWaitingScreen, HTMLStencilElement {
    }
    var HTMLRtkWaitingScreenElement: {
        prototype: HTMLRtkWaitingScreenElement;
        new (): HTMLRtkWaitingScreenElement;
    };
    interface HTMLElementTagNameMap {
        "rtk-ai": HTMLRtkAiElement;
        "rtk-ai-toggle": HTMLRtkAiToggleElement;
        "rtk-ai-transcriptions": HTMLRtkAiTranscriptionsElement;
        "rtk-audio-grid": HTMLRtkAudioGridElement;
        "rtk-audio-tile": HTMLRtkAudioTileElement;
        "rtk-audio-visualizer": HTMLRtkAudioVisualizerElement;
        "rtk-avatar": HTMLRtkAvatarElement;
        "rtk-breakout-room-manager": HTMLRtkBreakoutRoomManagerElement;
        "rtk-breakout-room-participants": HTMLRtkBreakoutRoomParticipantsElement;
        "rtk-breakout-rooms-manager": HTMLRtkBreakoutRoomsManagerElement;
        "rtk-breakout-rooms-toggle": HTMLRtkBreakoutRoomsToggleElement;
        "rtk-broadcast-message-modal": HTMLRtkBroadcastMessageModalElement;
        "rtk-button": HTMLRtkButtonElement;
        "rtk-camera-selector": HTMLRtkCameraSelectorElement;
        "rtk-camera-toggle": HTMLRtkCameraToggleElement;
        "rtk-caption-toggle": HTMLRtkCaptionToggleElement;
        "rtk-channel-creator": HTMLRtkChannelCreatorElement;
        "rtk-channel-details": HTMLRtkChannelDetailsElement;
        "rtk-channel-header": HTMLRtkChannelHeaderElement;
        "rtk-channel-selector-ui": HTMLRtkChannelSelectorUiElement;
        "rtk-channel-selector-view": HTMLRtkChannelSelectorViewElement;
        "rtk-chat": HTMLRtkChatElement;
        "rtk-chat-composer-ui": HTMLRtkChatComposerUiElement;
        "rtk-chat-composer-view": HTMLRtkChatComposerViewElement;
        "rtk-chat-message": HTMLRtkChatMessageElement;
        "rtk-chat-messages-ui": HTMLRtkChatMessagesUiElement;
        "rtk-chat-messages-ui-paginated": HTMLRtkChatMessagesUiPaginatedElement;
        "rtk-chat-search-results": HTMLRtkChatSearchResultsElement;
        "rtk-chat-selector-ui": HTMLRtkChatSelectorUiElement;
        "rtk-chat-toggle": HTMLRtkChatToggleElement;
        "rtk-clock": HTMLRtkClockElement;
        "rtk-confirmation-modal": HTMLRtkConfirmationModalElement;
        "rtk-controlbar": HTMLRtkControlbarElement;
        "rtk-controlbar-button": HTMLRtkControlbarButtonElement;
        "rtk-counter": HTMLRtkCounterElement;
        "rtk-debugger": HTMLRtkDebuggerElement;
        "rtk-debugger-audio": HTMLRtkDebuggerAudioElement;
        "rtk-debugger-screenshare": HTMLRtkDebuggerScreenshareElement;
        "rtk-debugger-system": HTMLRtkDebuggerSystemElement;
        "rtk-debugger-toggle": HTMLRtkDebuggerToggleElement;
        "rtk-debugger-video": HTMLRtkDebuggerVideoElement;
        "rtk-dialog": HTMLRtkDialogElement;
        "rtk-dialog-manager": HTMLRtkDialogManagerElement;
        "rtk-draft-attachment-view": HTMLRtkDraftAttachmentViewElement;
        "rtk-emoji-picker": HTMLRtkEmojiPickerElement;
        "rtk-emoji-picker-button": HTMLRtkEmojiPickerButtonElement;
        "rtk-ended-screen": HTMLRtkEndedScreenElement;
        "rtk-file-dropzone": HTMLRtkFileDropzoneElement;
        "rtk-file-message": HTMLRtkFileMessageElement;
        "rtk-file-message-view": HTMLRtkFileMessageViewElement;
        "rtk-file-picker-button": HTMLRtkFilePickerButtonElement;
        "rtk-fullscreen-toggle": HTMLRtkFullscreenToggleElement;
        "rtk-grid": HTMLRtkGridElement;
        "rtk-grid-pagination": HTMLRtkGridPaginationElement;
        "rtk-header": HTMLRtkHeaderElement;
        "rtk-icon": HTMLRtkIconElement;
        "rtk-idle-screen": HTMLRtkIdleScreenElement;
        "rtk-image-message": HTMLRtkImageMessageElement;
        "rtk-image-message-view": HTMLRtkImageMessageViewElement;
        "rtk-image-viewer": HTMLRtkImageViewerElement;
        "rtk-information-tooltip": HTMLRtkInformationTooltipElement;
        "rtk-join-stage": HTMLRtkJoinStageElement;
        "rtk-leave-button": HTMLRtkLeaveButtonElement;
        "rtk-leave-meeting": HTMLRtkLeaveMeetingElement;
        "rtk-livestream-indicator": HTMLRtkLivestreamIndicatorElement;
        "rtk-livestream-player": HTMLRtkLivestreamPlayerElement;
        "rtk-livestream-toggle": HTMLRtkLivestreamToggleElement;
        "rtk-logo": HTMLRtkLogoElement;
        "rtk-markdown-view": HTMLRtkMarkdownViewElement;
        "rtk-meeting": HTMLRtkMeetingElement;
        "rtk-meeting-title": HTMLRtkMeetingTitleElement;
        "rtk-menu": HTMLRtkMenuElement;
        "rtk-menu-item": HTMLRtkMenuItemElement;
        "rtk-menu-list": HTMLRtkMenuListElement;
        "rtk-message-list-view": HTMLRtkMessageListViewElement;
        "rtk-message-view": HTMLRtkMessageViewElement;
        "rtk-mic-toggle": HTMLRtkMicToggleElement;
        "rtk-microphone-selector": HTMLRtkMicrophoneSelectorElement;
        "rtk-mixed-grid": HTMLRtkMixedGridElement;
        "rtk-more-toggle": HTMLRtkMoreToggleElement;
        "rtk-mute-all-button": HTMLRtkMuteAllButtonElement;
        "rtk-mute-all-confirmation": HTMLRtkMuteAllConfirmationElement;
        "rtk-name-tag": HTMLRtkNameTagElement;
        "rtk-network-indicator": HTMLRtkNetworkIndicatorElement;
        "rtk-notification": HTMLRtkNotificationElement;
        "rtk-notifications": HTMLRtkNotificationsElement;
        "rtk-overlay-modal": HTMLRtkOverlayModalElement;
        "rtk-paginated-list": HTMLRtkPaginatedListElement;
        "rtk-participant": HTMLRtkParticipantElement;
        "rtk-participant-count": HTMLRtkParticipantCountElement;
        "rtk-participant-setup": HTMLRtkParticipantSetupElement;
        "rtk-participant-tile": HTMLRtkParticipantTileElement;
        "rtk-participants": HTMLRtkParticipantsElement;
        "rtk-participants-audio": HTMLRtkParticipantsAudioElement;
        "rtk-participants-stage-list": HTMLRtkParticipantsStageListElement;
        "rtk-participants-stage-queue": HTMLRtkParticipantsStageQueueElement;
        "rtk-participants-toggle": HTMLRtkParticipantsToggleElement;
        "rtk-participants-viewer-list": HTMLRtkParticipantsViewerListElement;
        "rtk-participants-waiting-list": HTMLRtkParticipantsWaitingListElement;
        "rtk-permissions-message": HTMLRtkPermissionsMessageElement;
        "rtk-pip-toggle": HTMLRtkPipToggleElement;
        "rtk-plugin-main": HTMLRtkPluginMainElement;
        "rtk-plugins": HTMLRtkPluginsElement;
        "rtk-plugins-toggle": HTMLRtkPluginsToggleElement;
        "rtk-poll": HTMLRtkPollElement;
        "rtk-poll-form": HTMLRtkPollFormElement;
        "rtk-polls": HTMLRtkPollsElement;
        "rtk-polls-toggle": HTMLRtkPollsToggleElement;
        "rtk-recording-indicator": HTMLRtkRecordingIndicatorElement;
        "rtk-recording-toggle": HTMLRtkRecordingToggleElement;
        "rtk-screen-share-toggle": HTMLRtkScreenShareToggleElement;
        "rtk-screenshare-view": HTMLRtkScreenshareViewElement;
        "rtk-settings": HTMLRtkSettingsElement;
        "rtk-settings-audio": HTMLRtkSettingsAudioElement;
        "rtk-settings-toggle": HTMLRtkSettingsToggleElement;
        "rtk-settings-video": HTMLRtkSettingsVideoElement;
        "rtk-setup-screen": HTMLRtkSetupScreenElement;
        "rtk-sidebar": HTMLRtkSidebarElement;
        "rtk-sidebar-ui": HTMLRtkSidebarUiElement;
        "rtk-simple-grid": HTMLRtkSimpleGridElement;
        "rtk-speaker-selector": HTMLRtkSpeakerSelectorElement;
        "rtk-spinner": HTMLRtkSpinnerElement;
        "rtk-spotlight-grid": HTMLRtkSpotlightGridElement;
        "rtk-spotlight-indicator": HTMLRtkSpotlightIndicatorElement;
        "rtk-stage": HTMLRtkStageElement;
        "rtk-stage-toggle": HTMLRtkStageToggleElement;
        "rtk-switch": HTMLRtkSwitchElement;
        "rtk-tab-bar": HTMLRtkTabBarElement;
        "rtk-text-composer-view": HTMLRtkTextComposerViewElement;
        "rtk-text-message": HTMLRtkTextMessageElement;
        "rtk-text-message-view": HTMLRtkTextMessageViewElement;
        "rtk-tooltip": HTMLRtkTooltipElement;
        "rtk-transcript": HTMLRtkTranscriptElement;
        "rtk-transcripts": HTMLRtkTranscriptsElement;
        "rtk-ui-provider": HTMLRtkUiProviderElement;
        "rtk-viewer-count": HTMLRtkViewerCountElement;
        "rtk-virtualized-participant-list": HTMLRtkVirtualizedParticipantListElement;
        "rtk-waiting-screen": HTMLRtkWaitingScreenElement;
    }
}
declare namespace LocalJSX {
    interface RtkAi {
        /**
          * Config
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkAiCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * View type
         */
        "view"?: AIView;
    }
    interface RtkAiToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkAiToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface RtkAiTranscriptions {
        /**
          * Initial transcriptions
         */
        "initialTranscriptions"?: Transcript[];
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface RtkAudioGrid {
        /**
          * Config
         */
        "config"?: UIConfig1;
        /**
          * Whether to hide self in the grid
         */
        "hideSelf"?: boolean;
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * States
         */
        "states"?: States1;
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    interface RtkAudioTile {
        /**
          * Config
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting
         */
        "meeting"?: Meeting;
        /**
          * Participant object
         */
        "participant"?: Peer;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States
         */
        "states"?: States1;
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    /**
     * An audio visualizer component which visualizes a participants audio.
     * Commonly used inside `rtk-name-tag`.
     */
    interface RtkAudioVisualizer {
        /**
          * Hide the visualizer if audio is muted
         */
        "hideMuted"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Audio visualizer for screensharing, it will use screenShareTracks.audio instead of audioTrack
         */
        "isScreenShare"?: boolean;
        /**
          * Participant object
         */
        "participant"?: Peer;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: AudioVisualizerVariant;
    }
    /**
     * Avatar component which renders a participant's image or their initials.
     */
    interface RtkAvatar {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Participant object
         */
        "participant"?: Peer | WaitlistedParticipant | { name: string; picture: string };
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Avatar type
         */
        "variant"?: AvatarVariant;
    }
    interface RtkBreakoutRoomManager {
        /**
          * allow room delete
         */
        "allowDelete"?: boolean;
        /**
          * Enable updating participants
         */
        "assigningParticipants"?: boolean;
        /**
          * display expanded card by default
         */
        "defaultExpanded"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Drag mode
         */
        "isDragMode"?: boolean;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Mode in which selector is used
         */
        "mode"?: 'edit' | 'create';
        /**
          * Event for deleting room
         */
        "onDelete"?: (event: RtkBreakoutRoomManagerCustomEvent<string>) => void;
        /**
          * On Delete event emitter
         */
        "onParticipantDelete"?: (event: RtkBreakoutRoomManagerCustomEvent<{
    customParticipantId: string;
  }>) => void;
        /**
          * Event for adding a participant
         */
        "onParticipantsAdd"?: (event: RtkBreakoutRoomManagerCustomEvent<null>) => void;
        /**
          * Event for joining a room
         */
        "onRoomJoin"?: (event: RtkBreakoutRoomManagerCustomEvent<null>) => void;
        /**
          * Event for updating room details
         */
        "onUpdate"?: (event: RtkBreakoutRoomManagerCustomEvent<{
    title: string | undefined;
    id: string;
  }>) => void;
        /**
          * Connected Room Config Object
         */
        "room"?: DraftMeeting;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component which lists all participants, with ability to
     * run privileged actions on each participant according to your permissions.
     */
    interface RtkBreakoutRoomParticipants {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits an event when all participants are selected or deselected
         */
        "onAllParticipantsToggleUpdate"?: (event: RtkBreakoutRoomParticipantsCustomEvent<string[]>) => void;
        /**
          * Emits an event when participants are dragged
         */
        "onParticipantsDragging"?: (event: RtkBreakoutRoomParticipantsCustomEvent<boolean>) => void;
        /**
          * Emits an event when selected participants are updated
         */
        "onSelectedParticipantsUpdate"?: (event: RtkBreakoutRoomParticipantsCustomEvent<string[]>) => void;
        /**
          * Participant ids
         */
        "participantIds"?: string[];
        /**
          * selected participants
         */
        "selectedParticipantIds"?: string[];
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface RtkBreakoutRoomsManager {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkBreakoutRoomsManagerCustomEvent<PartialStateEvent>) => void;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A button which toggles visibility of breakout rooms.
     * You need to pass the `meeting` object to it.
     */
    interface RtkBreakoutRoomsToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkBreakoutRoomsToggleCustomEvent<PartialStateEvent>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface RtkBroadcastMessageModal {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkBroadcastMessageModalCustomEvent<States1>) => void;
        /**
          * States object
         */
        "states"?: States1;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A button that follows RTK Design System.
     */
    interface RtkButton {
        /**
          * Where the button is disabled or not
         */
        "disabled"?: boolean;
        /**
          * Button type
         */
        "kind"?: ButtonKind;
        /**
          * Whether to reverse order of children
         */
        "reverse"?: boolean;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Button type
         */
        "type"?: HTMLButtonElement['type'];
        /**
          * Button variant
         */
        "variant"?: ButtonVariant;
    }
    /**
     * A component which lets to manage your audio devices and audio preferences.
     * Emits `rtkStateUpdate` event with data for muting notification sounds:
     * ```ts
     * {
     *  prefs: {
     *    muteNotificationSounds: boolean
     *  }
     * }
     * ```
     */
    interface RtkCameraSelector {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * variant
         */
        "variant"?: 'full' | 'inline';
    }
    /**
     * A button which toggles your camera.
     */
    interface RtkCameraToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkCameraToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface RtkCaptionToggle {
        /**
          * Config
         */
        "config"?: UIConfig1;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkCaptionToggleCustomEvent<States1>) => void;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * States object
         */
        "states"?: States1;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface RtkChannelCreator {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkChannelCreatorCustomEvent<States1>) => void;
        /**
          * Emits event to switch channel
         */
        "onSwitchChannel"?: (event: RtkChannelCreatorCustomEvent<string>) => void;
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    interface RtkChannelDetails {
        /**
          * Channel object
         */
        "channel": ChatChannel;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * List of channel members
         */
        "members"?: RTKBasicParticipant[];
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    interface RtkChannelHeader {
        /**
          * Channel object
         */
        "channel"?: ChatChannel;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Event emitted when back button is clicked
         */
        "onBack"?: (event: RtkChannelHeaderCustomEvent<void>) => void;
        /**
          * event triggered for search
         */
        "onSearch"?: (event: RtkChannelHeaderCustomEvent<string>) => void;
        /**
          * event triggered for search
         */
        "onSearchDismissed"?: (event: RtkChannelHeaderCustomEvent<any>) => void;
        /**
          * Show back button
         */
        "showBackButton"?: boolean;
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    interface RtkChannelSelectorUi {
        /**
          * Channels
         */
        "channels"?: ChatChannel[];
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * On channel changed
         */
        "onChannelChanged"?: (event: RtkChannelSelectorUiCustomEvent<string>) => void;
        /**
          * Selected channel id
         */
        "selectedChannelId"?: string;
        /**
          * show recent message in channel
         */
        "showRecentMessage"?: boolean;
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    interface RtkChannelSelectorView {
        /**
          * Channels
         */
        "channels": {
    id: string;
    name: string;
    avatarUrl?: string;
    icon?: keyof IconPack1;
    latestMessage?: string;
    latestMessageTime?: Date;
    unreadCount?: number;
  }[];
        /**
          * Disables search bar (default = false)
         */
        "disableSearch"?: boolean;
        /**
          * Hides avatar (default = false)
         */
        "hideAvatar"?: boolean;
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack1;
        /**
          * Event emitted when selected channel changes
         */
        "onChannelChange"?: (event: RtkChannelSelectorViewCustomEvent<{
    id: string;
    name: string;
    avatarUrl?: string;
    icon?: keyof IconPack1;
    latestMessage?: string;
    latestMessageTime?: Date;
    unreadCount?: number;
  }>) => void;
        /**
          * Selected channel id
         */
        "selectedChannelId"?: string;
        /**
          * Language
         */
        "t"?: RtkI18n1;
        /**
          * Render as dropdown or list (default = list)
         */
        "viewAs"?: 'dropdown' | 'list';
    }
    /**
     * Fully featured chat component with image & file upload, emoji picker and auto-scroll.
     */
    interface RtkChat {
        /**
          * Config
         */
        "config"?: UIConfig1;
        /**
          * disables private chat
         */
        "disablePrivateChat"?: boolean;
        /**
          * @deprecated Beta API, will change in future A filter function for messages to be displayed
         */
        "displayFilter"?: ChatFilter;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkChatCustomEvent<States1>) => void;
        /**
          * @deprecated Beta API, will change in future List of target presets allowed as private chat recipient
         */
        "privatePresetFilter"?: String[];
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface RtkChatComposerUi {
        /**
          * Whether user can send file messages
         */
        "canSendFiles"?: boolean;
        /**
          * Whether user can send text messages
         */
        "canSendTextMessage"?: boolean;
        /**
          * channel id
         */
        "channelId"?: string;
        /**
          * Whether to show emoji picker
         */
        "disableEmojiPicker"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * list of members that can be mentioned
         */
        "members"?: RTKBasicParticipant[];
        /**
          * Event emitted when message editing is cancelled
         */
        "onRtkEditCancelled"?: (event: RtkChatComposerUiCustomEvent<any>) => void;
        /**
          * Event emitted when message is edited
         */
        "onRtkEditMessage"?: (event: RtkChatComposerUiCustomEvent<{
    id: string;
    message: string;
    channelId?: string;
  }>) => void;
        /**
          * Event emitted when new message is submitted
         */
        "onRtkNewMessage"?: (event: RtkChatComposerUiCustomEvent<RtkNewMessageEvent>) => void;
        /**
          * prefill the composer
         */
        "prefill"?: {
    suggestedReplies?: string[];
    editMessage?: TextMessage;
    replyMessage?: TextMessage;
  };
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component which renders a chat composer
     */
    interface RtkChatComposerView {
        /**
          * Whether user can send file messages
         */
        "canSendFiles"?: boolean;
        /**
          * Whether user can send text messages
         */
        "canSendTextMessage"?: boolean;
        /**
          * Whether to show emoji picker
         */
        "disableEmojiPicker"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Placeholder for text input
         */
        "inputTextPlaceholder"?: string;
        /**
          * Sets composer to edit mode
         */
        "isEditing"?: boolean;
        /**
          * Max length for text input
         */
        "maxLength"?: number;
        /**
          * Message to be pre-populated
         */
        "message"?: string;
        /**
          * Event emitted when message editing is cancelled
         */
        "onEditCancel"?: (event: RtkChatComposerViewCustomEvent<void>) => void;
        /**
          * Event emitted when message is edited
         */
        "onEditMessage"?: (event: RtkChatComposerViewCustomEvent<string>) => void;
        /**
          * Event emitted when new message is submitted
         */
        "onNewMessage"?: (event: RtkChatComposerViewCustomEvent<NewMessageEvent>) => void;
        /**
          * Event emitted when quoted message is dismissed
         */
        "onQuotedMessageDismiss"?: (event: RtkChatComposerViewCustomEvent<void>) => void;
        /**
          * Quote message to be displayed
         */
        "quotedMessage"?: string;
        /**
          * Rate limits
         */
        "rateLimits"?: { period: number; maxInvocations: number; };
        /**
          * Key for storing message in localStorage
         */
        "storageKey"?: string;
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    interface RtkChatMessage {
        /**
          * aligns message to right
         */
        "alignRight"?: boolean;
        /**
          * can delete message
         */
        "canDelete"?: boolean;
        /**
          * can edit message
         */
        "canEdit"?: boolean;
        /**
          * can pin this message
         */
        "canPin"?: boolean;
        /**
          * can quote reply this message
         */
        "canReply"?: boolean;
        /**
          * Child
         */
        "child"?: HTMLElement;
        /**
          * disables controls
         */
        "disableControls"?: boolean;
        /**
          * hides avatar
         */
        "hideAvatar"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * is continued
         */
        "isContinued"?: boolean;
        /**
          * if sender is self
         */
        "isSelf"?: boolean;
        /**
          * is unread
         */
        "isUnread"?: boolean;
        /**
          * Whether to left align the chat bubbles
         */
        "leftAlign"?: boolean;
        /**
          * message item
         */
        "message"?: Message;
        /**
          * Event for when edit is clicked on a message
         */
        "onDelete"?: (event: RtkChatMessageCustomEvent<Message>) => void;
        /**
          * Event for when edit is clicked on a message
         */
        "onEdit"?: (event: RtkChatMessageCustomEvent<Message>) => void;
        /**
          * Event for when pin is clicked on a message
         */
        "onPin"?: (event: RtkChatMessageCustomEvent<Message>) => void;
        /**
          * Event for when reply is clicked on a message
         */
        "onReply"?: (event: RtkChatMessageCustomEvent<Message>) => void;
        /**
          * sender display picture url
         */
        "senderDisplayPicture"?: string;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    interface RtkChatMessagesUi {
        /**
          * Can current user pin/unpin messages
         */
        "canPinMessages"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Chat Messages
         */
        "messages"?: Chat[];
        /**
          * Event emitted when a message is pinned or unpinned
         */
        "onPinMessage"?: (event: RtkChatMessagesUiCustomEvent<Message>) => void;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkChatMessagesUiCustomEvent<States>) => void;
        /**
          * Selected group key
         */
        "selectedGroup"?: string;
        /**
          * User ID of self user
         */
        "selfUserId"?: string;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface RtkChatMessagesUiPaginated {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Whether to align chat bubbles to the left
         */
        "leftAlign"?: boolean;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Event emitted when a message is deleted
         */
        "onDeleteMessage"?: (event: RtkChatMessagesUiPaginatedCustomEvent<Message>) => void;
        /**
          * Event for editing a message
         */
        "onEditMessageInit"?: (event: RtkChatMessagesUiPaginatedCustomEvent<{
    payload: TextMessage;
    flags: { isReply?: boolean; isEdit?: boolean };
  }>) => void;
        /**
          * Event emitted when a message is pinned or unpinned
         */
        "onPinMessage"?: (event: RtkChatMessagesUiPaginatedCustomEvent<Message>) => void;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkChatMessagesUiPaginatedCustomEvent<States>) => void;
        /**
          * Selected channel
         */
        "selectedChannel"?: ChatChannel;
        /**
          * Selected channel id
         */
        "selectedChannelId"?: string;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface RtkChatSearchResults {
        /**
          * Channel id
         */
        "channelId"?: string;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Search query
         */
        "query"?: string;
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    interface RtkChatSelectorUi {
        /**
          * Participants
         */
        "groups"?: ChatGroup[];
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Event emitted when chat scope is changed
         */
        "onRtkChatGroupChanged"?: (event: RtkChatSelectorUiCustomEvent<ChatGroupChangedType>) => void;
        /**
          * Selected participant
         */
        "selectedGroupId"?: string;
        /**
          * Self User ID
         */
        "selfUserId"?: string;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Unread counts
         */
        "unreadCounts"?: Record<string, number>;
    }
    /**
     * A button which toggles visibility of chat.
     * You need to pass the `meeting` object to it to see the unread messages count badge.
     * When clicked it emits a `rtkStateUpdate` event with the data:
     * ```ts
     * { activeSidebar: boolean; sidebar: 'chat' }
     * ```
     */
    interface RtkChatToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkChatToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    /**
     * Shows the time elapsed in a meeting.
     */
    interface RtkClock {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
    }
    /**
     * A confirmation modal.
     */
    interface RtkConfirmationModal {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkConfirmationModalCustomEvent<States>) => void;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * Controlbar component provides you with various designs as variants.
     */
    interface RtkControlbar {
        /**
          * Config
         */
        "config"?: UIConfig1;
        /**
          * Whether to render the default UI
         */
        "disableRender"?: boolean;
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: 'solid' | 'boxed';
    }
    /**
     * A skeleton component used for composing custom controlbar buttons.
     */
    interface RtkControlbarButton {
        /**
          * Whether icon requires brand color
         */
        "brandIcon"?: boolean;
        /**
          * Whether button is disabled
         */
        "disabled"?: boolean;
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Loading state Ignores current icon and shows a spinner if true
         */
        "isLoading"?: boolean;
        /**
          * Label of button
         */
        "label"?: string;
        /**
          * Whether to show warning icon
         */
        "showWarning"?: boolean;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant1;
    }
    /**
     * A number picker with increment and decrement buttons.
     */
    interface RtkCounter {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Minimum value
         */
        "minValue"?: number;
        /**
          * On change event emitter
         */
        "onValueChange"?: (event: RtkCounterCustomEvent<string>) => void;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Initial value
         */
        "value"?: number;
    }
    /**
     * A troubleshooting component to identify and fix any issues in the meeting.
     */
    interface RtkDebugger {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkDebuggerCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface RtkDebuggerAudio {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * States object
         */
        "states"?: States1;
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    interface RtkDebuggerScreenshare {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * States object
         */
        "states"?: States1;
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    interface RtkDebuggerSystem {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * States object
         */
        "states"?: States1;
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    interface RtkDebuggerToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkDebuggerToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface RtkDebuggerVideo {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * States object
         */
        "states"?: States1;
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    /**
     * A dialog component.
     */
    interface RtkDialog {
        /**
          * UI Config
         */
        "config"?: UIConfig;
        /**
          * Whether Escape key can close the modal
         */
        "disableEscapeKey"?: boolean;
        /**
          * Whether to show the close button
         */
        "hideCloseButton"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Event emitted when dialog is closed
         */
        "onRtkDialogClose"?: (event: RtkDialogCustomEvent<any>) => void;
        /**
          * Whether a dialog is open or not
         */
        "open"?: boolean;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component which handles all dialog elements in a component such as:
     * - rtk-settings
     * - rtk-leave-meeting
     * - rtk-permissions-message
     * - rtk-image-viewer
     * - rtk-breakout-rooms-manager
     * This components depends on the values from `states` object.
     */
    interface RtkDialogManager {
        /**
          * UI Config
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkDialogManagerCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component which renders the draft attachment to send
     */
    interface RtkDraftAttachmentView {
        /**
          * Attachment to display
         */
        "attachment"?: {
    type: 'image' | 'file';
    file: File;
  };
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Event triggered when the attachment is deleted
         */
        "onDeleteAttachment"?: (event: RtkDraftAttachmentViewCustomEvent<any>) => void;
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    /**
     * A very simple emoji picker component.
     */
    interface RtkEmojiPicker {
        /**
          * Controls whether or not to focus on mount
         */
        "focusWhenOpened"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Close event
         */
        "onPickerClose"?: (event: RtkEmojiPickerCustomEvent<void>) => void;
        /**
          * Event which is emitted when an Emoji is clicked
         */
        "onRtkEmojiClicked"?: (event: RtkEmojiPickerCustomEvent<string>) => void;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface RtkEmojiPickerButton {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Active state indicator
         */
        "isActive"?: boolean;
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    /**
     * A screen which shows a meeting has ended.
     */
    interface RtkEndedScreen {
        /**
          * Config object
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Global states
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Global states
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface RtkFileDropzone {
        /**
          * Host element on which drop events to attach
         */
        "hostEl"?: HTMLElement;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * drop event callback
         */
        "onDropCallback"?: (event: RtkFileDropzoneCustomEvent<DragEvent>) => void;
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    /**
     * A component which renders a file message from chat.
     */
    interface RtkFileMessage {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Whether the message is continued by same user
         */
        "isContinued"?: boolean;
        /**
          * Text message object
         */
        "message": FileMessage;
        /**
          * Date object of now, to calculate distance between dates
         */
        "now"?: Date;
        /**
          * show message in bubble
         */
        "showBubble"?: boolean;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component which renders a file message.
     */
    interface RtkFileMessageView {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Name of the file
         */
        "name": string;
        /**
          * Size of the file
         */
        "size": number;
        /**
          * Url of the file
         */
        "url": string;
    }
    interface RtkFilePickerButton {
        /**
          * File type filter to open file picker with
         */
        "filter"?: string;
        /**
          * Icon
         */
        "icon"?: keyof IconPack1;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Label for tooltip
         */
        "label"?: string;
        /**
          * Event when a file is selected for upload
         */
        "onFileChange"?: (event: RtkFilePickerButtonCustomEvent<File>) => void;
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    /**
     * A button which toggles full screen mode for any
     * existing `rtk-meeting` component in the DOM.
     */
    interface RtkFullscreenToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkFullscreenToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Target Element to fullscreen
         */
        "targetElement"?: HTMLElement;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    /**
     * The main grid component which abstracts all the grid handling logic and renders it for you.
     */
    interface RtkGrid {
        /**
          * The aspect ratio of each participant
         */
        "aspectRatio"?: string;
        /**
          * Config object
         */
        "config"?: UIConfig;
        /**
          * Gap between participants
         */
        "gap"?: number;
        /**
          * Grid size
         */
        "gridSize"?: GridSize;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Grid Layout
         */
        "layout"?: GridLayout;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkGridCustomEvent<States>) => void;
        /**
          * @deprecated
         */
        "overrides"?: any;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component which allows you to change current page and view mode
     * of active participants list. This is reflected in the `rtk-grid` component.
     */
    interface RtkGridPagination {
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size Prop
         */
        "size"?: Size;
        /**
          * States
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: GridPaginationVariants;
    }
    /**
     * A component that houses all the header components.
     */
    interface RtkHeader {
        /**
          * Config
         */
        "config"?: UIConfig1;
        /**
          * Whether to render the default UI
         */
        "disableRender"?: boolean;
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: 'solid' | 'boxed';
    }
    /**
     * An icon component which accepts an svg string and renders it.
     */
    interface RtkIcon {
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Icon variant
         */
        "variant"?: IconVariant;
    }
    /**
     * A screen that handles the idle state,
     * i.e; when you are waiting for data about the meeting, specifically the `meeting` object.
     */
    interface RtkIdleScreen {
        /**
          * Config object
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting
         */
        "meeting"?: Meeting;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component which renders an image message from chat.
     */
    interface RtkImageMessage {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Whether the message is continued by same user
         */
        "isContinued"?: boolean;
        /**
          * Text message object
         */
        "message": ImageMessage;
        /**
          * Date object of now, to calculate distance between dates
         */
        "now"?: Date;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkImageMessageCustomEvent<States>) => void;
        /**
          * show message in bubble
         */
        "showBubble"?: boolean;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component which renders an image message.
     */
    interface RtkImageMessageView {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * preview event
         */
        "onPreview"?: (event: RtkImageMessageViewCustomEvent<string>) => void;
        /**
          * Language
         */
        "t"?: RtkI18n1;
        /**
          * Url of the image
         */
        "url": string;
    }
    /**
     * A component which shows an image sent via chat.
     */
    interface RtkImageViewer {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Image message
         */
        "image": ImageMessage;
        /**
          * Emitted when viewer should be closed
         */
        "onClose"?: (event: RtkImageViewerCustomEvent<void>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface RtkInformationTooltip {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
    }
    interface RtkJoinStage {
        /**
          * UI Config
         */
        "config"?: UIConfig;
        /**
          * Content Config
         */
        "dataConfig"?: ModalDataConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Event which is emitted when user confirms joining stage
         */
        "onRtkJoinStage"?: (event: RtkJoinStageCustomEvent<void>) => void;
        /**
          * Event which is emitted when user cancel joining stage
         */
        "onRtkLeaveStage"?: (event: RtkJoinStageCustomEvent<void>) => void;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkJoinStageCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A button which toggles visilibility of the leave confirmation dialog.
     */
    interface RtkLeaveButton {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkLeaveButtonCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    /**
     * A component which allows you to leave a meeting or
     * end meeting for all, if you have the permission.
     */
    interface RtkLeaveMeeting {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkLeaveMeetingCustomEvent<States>) => void;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface RtkLivestreamIndicator {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    interface RtkLivestreamPlayer {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emit API error events
         */
        "onRtkApiError"?: (event: RtkLivestreamPlayerCustomEvent<{
    trace: string;
    message: string;
  }>) => void;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    interface RtkLivestreamToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emit API error events
         */
        "onRtkApiError"?: (event: RtkLivestreamToggleCustomEvent<{
    trace: string;
    message: string;
  }>) => void;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkLivestreamToggleCustomEvent<States1>) => void;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    /**
     * A component which loads the logo from your config, or via the `logo-url` attribute.
     */
    interface RtkLogo {
        /**
          * Config object
         */
        "config"?: UIConfig;
        /**
          * Logo URL
         */
        "logoUrl"?: string;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface RtkMarkdownView {
        /**
          * max length of text to render as markdown
         */
        "maxLength"?: number;
        /**
          * raw text to render as markdown
         */
        "text"?: string;
    }
    /**
     * A single component which renders an entire meeting UI.
     * It loads your preset and renders the UI based on it.
     * With this component, you don't have to handle all the states,
     * dialogs and other smaller bits of managing the application.
     */
    interface RtkMeeting {
        /**
          * Whether to apply the design system on the document root from config
         */
        "applyDesignSystem"?: boolean;
        /**
          * UI Config
         */
        "config"?: UIConfig;
        /**
          * Grid layout
         */
        "gridLayout"?: GridLayout1;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Whether participant should leave when this component gets unmounted
         */
        "leaveOnUnmount"?: boolean;
        /**
          * Whether to load config from preset
         */
        "loadConfigFromPreset"?: boolean;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Fill type
         */
        "mode"?: MeetingMode;
        /**
          * Emits `rtkStatesUpdate` so that developers can listen to onRtkStatesUpdate and update their own stores Do not confuse this with `rtkStateUpdate` that other components emit
         */
        "onRtkStatesUpdate"?: (event: RtkMeetingCustomEvent<States>) => void;
        /**
          * Whether to show setup screen or not
         */
        "showSetupScreen"?: boolean;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * Displays the title of the meeting.
     */
    interface RtkMeetingTitle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A menu component.
     */
    interface RtkMenu {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Offset in px
         */
        "offset"?: number;
        /**
          * Placement of menu
         */
        "placement"?: Placement;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A menu item component.
     */
    interface RtkMenuItem {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A menu list component.
     */
    interface RtkMenuList {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component which renders list of messages.
     */
    interface RtkMessageListView {
        /**
          * Estimated height of an item
         */
        "estimateItemSize"?: number;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Function to load more messages. Messages returned from this will be preprended
         */
        "loadMore"?: (lastMessage: Message) => Promise<Message[]>;
        /**
          * Messages to render
         */
        "messages": Message[];
        /**
          * Render function of the message
         */
        "renderer": (message: Message, index: number) => HTMLElement;
        /**
          * Maximum visible messages
         */
        "visibleItemsCount"?: number;
    }
    interface RtkMessageView {
        /**
          * List of actions to show in menu
         */
        "actions"?: MessageAction[];
        /**
          * Author display label
         */
        "authorName"?: string;
        /**
          * Avatar image url
         */
        "avatarUrl"?: string;
        /**
          * Hides author display label
         */
        "hideAuthorName"?: boolean;
        /**
          * Hides avatar
         */
        "hideAvatar"?: boolean;
        /**
          * Hides metadata (time)
         */
        "hideMetadata"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * action event
         */
        "onAction"?: (event: RtkMessageViewCustomEvent<string>) => void;
        /**
          * Time when message was sent
         */
        "time"?: Date;
        /**
          * Appearance
         */
        "variant"?: 'plain' | 'bubble';
        /**
          * Render
         */
        "viewType"?: 'incoming' | 'outgoing';
    }
    /**
     * A button which toggles your microphone.
     */
    interface RtkMicToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkMicToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    /**
     * A component which lets to manage your audio devices and audio preferences.
     * Emits `rtkStateUpdate` event with data for muting notification sounds:
     * ```ts
     * {
     *  prefs: {
     *    muteNotificationSounds: boolean
     *  }
     * }
     * ```
     */
    interface RtkMicrophoneSelector {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * variant
         */
        "variant"?: 'full' | 'inline';
    }
    /**
     * A grid component which handles screenshares, plugins and participants.
     */
    interface RtkMixedGrid {
        /**
          * Aspect Ratio of participant tile  Format: `width:height`
         */
        "aspectRatio"?: string;
        /**
          * UI Config
         */
        "config"?: UIConfig;
        /**
          * Gap between participant tiles
         */
        "gap"?: number;
        /**
          * Grid size
         */
        "gridSize"?: GridSize1;
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack;
        /**
          * Grid Layout
         */
        "layout"?: GridLayout1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Participants
         */
        "participants"?: Peer[];
        /**
          * Pinned Participants
         */
        "pinnedParticipants"?: Peer[];
        /**
          * Active Plugins
         */
        "plugins"?: RTKPlugin[];
        /**
          * Screenshare Participants
         */
        "screenShareParticipants"?: Peer[];
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A button which toggles visibility of a more menu.
     * When clicked it emits a `rtkStateUpdate` event with the data:
     * ```ts
     * { activeMoreMenu: boolean; }
     * ```
     */
    interface RtkMoreToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkMoreToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface RtkMuteAllButton {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkMuteAllButtonCustomEvent<States1>) => void;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface RtkMuteAllConfirmation {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkMuteAllConfirmationCustomEvent<States>) => void;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component which shows a participant's name.
     */
    interface RtkNameTag {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Whether it is used in a screen share view
         */
        "isScreenShare"?: boolean;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Name tag variant
         */
        "variant"?: RtkNameTagVariant;
    }
    interface RtkNetworkIndicator {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Is for screenshare
         */
        "isScreenShare"?: boolean;
        /**
          * Meeting
         */
        "meeting"?: Meeting;
        /**
          * Participant or Self
         */
        "participant"?: Peer;
        /**
          * Language
         */
        "t"?: RtkI18n1;
    }
    /**
     * A component which shows a notification.
     * You need to remove the element after you receive the
     * `rtkNotificationDismiss` event.
     */
    interface RtkNotification {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Message
         */
        "notification": Notification;
        /**
          * Dismiss event
         */
        "onRtkNotificationDismiss"?: (event: RtkNotificationCustomEvent<string>) => void;
        /**
          * Stops timeout when true
         */
        "paused"?: boolean;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component which handles notifications.
     * You can configure which notifications you want to see and which ones you want to hear.
     * There are also certain limits which you can set as well.
     */
    interface RtkNotifications {
        /**
          * Config object
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A confirmation modal.
     */
    interface RtkOverlayModal {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkOverlayModalCustomEvent<States>) => void;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface RtkPaginatedList {
        /**
          * auto scroll list to bottom
         */
        "autoScroll"?: boolean;
        /**
          * Create nodes
         */
        "createNodes"?: (data: unknown[]) => VNode[];
        /**
          * label to show when empty
         */
        "emptyListLabel"?: string;
        /**
          * Fetch the data
         */
        "fetchData"?: (timestamp: number, size: number, reversed: boolean) => Promise<unknown[]>;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Page Size
         */
        "pageSize"?: number;
        /**
          * Number of pages allowed to be shown
         */
        "pagesAllowed"?: number;
        /**
          * Item id
         */
        "selectedItemId"?: string;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A participant entry component used inside `rtk-participants` which shows data like:
     * name, picture and media device status.
     * You can perform privileged actions on the participant too.
     */
    interface RtkParticipant {
        /**
          * Config object
         */
        "config"?: UIConfig1;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emit notifications
         */
        "onRtkSendNotification"?: (event: RtkParticipantCustomEvent<{
    trace: string;
    message: string;
  }>) => void;
        /**
          * Participant object
         */
        "participant"?: Peer;
        /**
          * States
         */
        "states"?: States1;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Show participant summary
         */
        "view"?: ParticipantViewMode;
    }
    /**
     * A component which shows count of total joined participants in a meeting.
     */
    interface RtkParticipantCount {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface RtkParticipantSetup {
        /**
          * Config object
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Whether tile is used for preview
         */
        "isPreview"?: boolean;
        /**
          * Position of name tag
         */
        "nameTagPosition"?: | 'bottom-left'
    | 'bottom-right'
    | 'bottom-center'
    | 'top-left'
    | 'top-right'
    | 'top-center';
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: 'solid' | 'gradient';
    }
    /**
     * A component which plays a participants video and allows for placement
     * of components like `rtk-name-tag`, `rtk-audio-visualizer` or any other component.
     */
    interface RtkParticipantTile {
        /**
          * Config object
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Whether tile is used for preview
         */
        "isPreview"?: boolean;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Position of name tag
         */
        "nameTagPosition"?: | 'bottom-left'
    | 'bottom-right'
    | 'bottom-center'
    | 'top-left'
    | 'top-right'
    | 'top-center';
        /**
          * Event triggered when tile is loaded
         */
        "onTileLoad"?: (event: RtkParticipantTileCustomEvent<{ participant: Peer; videoElement: HTMLVideoElement }>) => void;
        /**
          * Event triggered when tile is unloaded
         */
        "onTileUnload"?: (event: RtkParticipantTileCustomEvent<Peer>) => void;
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: 'solid' | 'gradient';
    }
    /**
     * A component which lists all participants, with ability to
     * run privileged actions on each participant according to your permissions.
     */
    interface RtkParticipants {
        /**
          * Config
         */
        "config"?: UIConfig;
        /**
          * Default section
         */
        "defaultParticipantsTabId"?: ParticipantsTabId;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkParticipantsCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component which plays all the audio from participants and screenshares.
     */
    interface RtkParticipantsAudio {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Callback to execute when the dialog is closed
         */
        "onDialogClose"?: (event: RtkParticipantsAudioCustomEvent<void>) => void;
        /**
          * Pass existing audio element
         */
        "preloadedAudioElem"?: HTMLAudioElement;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component which lists all participants, with ability to
     * run privileged actions on each participant according to your permissions.
     */
    interface RtkParticipantsStageList {
        /**
          * Config
         */
        "config"?: UIConfig;
        /**
          * Hide Stage Participants Count Header
         */
        "hideHeader"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Search
         */
        "search"?: string;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Meeting object
         */
        "states"?: States1;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * View mode for participants list
         */
        "view"?: ParticipantsViewMode;
    }
    interface RtkParticipantsStageQueue {
        /**
          * Config
         */
        "config"?: UIConfig1;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: RtkI18n1;
        /**
          * View mode for participants list
         */
        "view"?: ParticipantsViewMode;
    }
    /**
     * A button which toggles visibility of participants.
     * When clicked it emits a `rtkStateUpdate` event with the data:
     * ```ts
     * { activeSidebar: boolean; sidebar: 'participants' }
     * ```
     */
    interface RtkParticipantsToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkParticipantsToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    interface RtkParticipantsViewerList {
        /**
          * Config
         */
        "config"?: UIConfig1;
        /**
          * Hide Viewer Count Header
         */
        "hideHeader"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Search
         */
        "search"?: string;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: RtkI18n1;
        /**
          * View mode for participants list
         */
        "view"?: ParticipantsViewMode;
    }
    interface RtkParticipantsWaitingList {
        /**
          * Config
         */
        "config"?: UIConfig1;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: RtkI18n1;
        /**
          * View mode for participants list
         */
        "view"?: ParticipantsViewMode;
    }
    /**
     * A component which shows permission related troubleshooting
     * information.
     */
    interface RtkPermissionsMessage {
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkPermissionsMessageCustomEvent<States>) => void;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface RtkPipToggle {
        /**
          * Config
         */
        "config"?: UIConfig1;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkPipToggleCustomEvent<States1>) => void;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * States object
         */
        "states"?: States1;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    /**
     * A component which loads a plugin.
     */
    interface RtkPluginMain {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting
         */
        "meeting"?: Meeting;
        /**
          * Plugin
         */
        "plugin": RTKPlugin;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component which lists all available plugins from their preset,
     * and ability to enable or disable plugins.
     */
    interface RtkPlugins {
        /**
          * Config
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkPluginsCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A button which toggles visibility of plugins.
     * When clicked it emits a `rtkStateUpdate` event with the data:
     * ```ts
     * { activeSidebar: boolean; sidebar: 'plugins' }
     * ```
     */
    interface RtkPluginsToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkPluginsToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    /**
     * A poll component.
     * Shows a poll where a user can vote.
     */
    interface RtkPoll {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Event which is emitted when a poll is voted on
         */
        "onRtkVotePoll"?: (event: RtkPollCustomEvent<{
    id: string;
    index: number;
  }>) => void;
        /**
          * Permissions Object
         */
        "permissions"?: RTKPermissionsPreset;
        /**
          * Poll
         */
        "poll": Poll;
        /**
          * Self ID
         */
        "self"?: string;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component that lets you create a poll.
     */
    interface RtkPollForm {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Event which is emitted when a poll is created
         */
        "onRtkCreatePoll"?: (event: RtkPollFormCustomEvent<PollObject>) => void;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component which lists all available plugins a user can access with
     * the ability to enable or disable them as per their permissions.
     */
    interface RtkPolls {
        /**
          * Config
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A button which toggles visibility of polls.
     * You need to pass the `meeting` object to it to see the unread polls count badge.
     * When clicked it emits a `rtkStateUpdate` event with the data:
     * ```ts
     * { activeSidebar: boolean; sidebar: 'polls' }
     * ```
     */
    interface RtkPollsToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkPollsToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    /**
     * A component which indicates the recording status of a meeting.
     * It will not render anything if no recording is taking place.
     */
    interface RtkRecordingIndicator {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A button which toggles recording state of a meeting.
     * Only a privileged user can perform this action,
     * thus the button will not be visible for participants
     * who don't have the permission to record a meeting.
     */
    interface RtkRecordingToggle {
        /**
          * Disable the button
         */
        "disabled"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emit api error events
         */
        "onRtkApiError"?: (event: RtkRecordingToggleCustomEvent<{
    trace: string;
    message: string;
  }>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    /**
     * A button which toggles your screenshare.
     */
    interface RtkScreenShareToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emit api error events
         */
        "onRtkApiError"?: (event: RtkScreenShareToggleCustomEvent<{
    trace: string;
    message: string;
  }>) => void;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkScreenShareToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    /**
     * A component which plays a participant's screenshared video.
     * It also allows for placement of other components similar to `rtk-participant-tile`.
     * This component will not render anything if the participant hasn't start screensharing.
     */
    interface RtkScreenshareView {
        /**
          * Hide full screen button
         */
        "hideFullScreenButton"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Position of name tag
         */
        "nameTagPosition"?: | 'bottom-left'
    | 'bottom-right'
    | 'bottom-center'
    | 'top-left'
    | 'top-right'
    | 'top-center';
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkScreenshareViewCustomEvent<States>) => void;
        /**
          * Emits when video playback happens successfully
         */
        "onScreensharePlay"?: (event: RtkScreenshareViewCustomEvent<{
    participant: Peer;
    screenshareParticipant: Peer;
  }>) => void;
        /**
          * Participant object
         */
        "participant": Peer;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: 'solid' | 'gradient';
    }
    /**
     * A settings component to see and change your audio/video devices
     * as well as see your connection quality.
     */
    interface RtkSettings {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkSettingsCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component which lets to manage your audio devices and audio preferences.
     * Emits `rtkStateUpdate` event with data for muting notification sounds:
     * ```ts
     * {
     *  prefs: {
     *    muteNotificationSounds: boolean
     *  }
     * }
     * ```
     */
    interface RtkSettingsAudio {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Event updated state
         */
        "onRtkStateUpdate"?: (event: RtkSettingsAudioCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A button which toggles visibility of settings module.
     * When clicked it emits a `rtkStateUpdate` event with the data:
     * ```ts
     * { activeSettings: boolean; }
     * ```
     */
    interface RtkSettingsToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkSettingsToggleCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    /**
     * A component which lets to manage your camera devices and your video preferences.
     * Emits `rtkStateUpdate` event with data for toggling mirroring of self video:
     * ```ts
     * {
     *  prefs: {
     *    mirrorVideo: boolean
     *  }
     * }
     * ```
     */
    interface RtkSettingsVideo {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state
         */
        "onRtkStateUpdate"?: (event: RtkSettingsVideoCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A screen shown before joining the meeting, where you can edit your display name,
     * and media settings.
     */
    interface RtkSetupScreen {
        /**
          * Config object
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkSetupScreenCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component which handles the sidebar and
     * you can customize which sections you want, and which section you want as the default.
     */
    interface RtkSidebar {
        /**
          * Config
         */
        "config"?: UIConfig;
        /**
          * Default section
         */
        "defaultSection"?: RtkSidebarSection;
        /**
          * Enabled sections in sidebar
         */
        "enabledSections"?: RtkSidebarTab[];
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkSidebarCustomEvent<States>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * View type
         */
        "view"?: RtkSidebarView;
    }
    interface RtkSidebarUi {
        /**
          * Default tab to open
         */
        "currentTab"?: string;
        /**
          * Option to focus close button when opened
         */
        "focusCloseButton"?: boolean;
        /**
          * Hide Close Action
         */
        "hideCloseAction"?: boolean;
        /**
          * Hide Main Header
         */
        "hideHeader"?: boolean;
        /**
          * Icon Pack
         */
        "iconPack"?: { people: string; people_checked: string; chat: string; poll: string; participants: string; rocket: string; call_end: string; share: string; mic_on: string; mic_off: string; video_on: string; video_off: string; share_screen_start: string; share_screen_stop: string; share_screen_person: string; clock: string; dismiss: string; send: string; search: string; more_vertical: string; chevron_down: string; chevron_up: string; chevron_left: string; chevron_right: string; settings: string; wifi: string; speaker: string; speaker_off: string; download: string; full_screen_maximize: string; full_screen_minimize: string; copy: string; attach: string; image: string; emoji_multiple: string; image_off: string; disconnected: string; wand: string; recording: string; subtract: string; stop_recording: string; warning: string; pin: string; pin_off: string; spinner: string; breakout_rooms: string; add: string; shuffle: string; edit: string; delete: string; back: string; save: string; web: string; checkmark: string; spotlight: string; join_stage: string; leave_stage: string; pip_off: string; pip_on: string; signal_1: string; signal_2: string; signal_3: string; signal_4: string; signal_5: string; start_livestream: string; stop_livestream: string; viewers: string; debug: string; info: string; devices: string; horizontal_dots: string; ai_sparkle: string; meeting_ai: string; create_channel: string; create_channel_illustration: string; captionsOn: string; captionsOff: string; play: string; pause: string; fastForward: string; minimize: string; maximize: string; };
        /**
          * Tab change event
         */
        "onSidebarClose"?: (event: RtkSidebarUiCustomEvent<void>) => void;
        /**
          * Tab change event
         */
        "onTabChange"?: (event: RtkSidebarUiCustomEvent<string>) => void;
        /**
          * Language
         */
        "t"?: RtkI18n1;
        /**
          * Tabs
         */
        "tabs"?: RtkSidebarTab1[];
        /**
          * View
         */
        "view"?: RtkSidebarView1;
    }
    /**
     * A grid component which renders only the participants in a simple grid.
     */
    interface RtkSimpleGrid {
        /**
          * Aspect Ratio of participant tile  Format: `width:height`
         */
        "aspectRatio"?: string;
        /**
          * UI Config
         */
        "config"?: UIConfig;
        /**
          * Gap between participant tiles
         */
        "gap"?: number;
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Participants
         */
        "participants"?: Peer[];
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component which lets to manage your audio devices and audio preferences.
     * Emits `rtkStateUpdate` event with data for muting notification sounds:
     * ```ts
     * {
     *  prefs: {
     *    muteNotificationSounds: boolean
     *  }
     * }
     * ```
     */
    interface RtkSpeakerSelector {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * variant
         */
        "variant"?: 'full' | 'inline';
    }
    /**
     * A component which shows an animating spinner.
     */
    interface RtkSpinner {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Size
         */
        "size"?: Size1;
    }
    /**
     * A grid component that renders two lists of participants: `pinnedParticipants` and `participants`.
     * You can customize the layout to a `column` view, by default is is `row`.
     * - Participants from `pinnedParticipants[]` are rendered inside a larger grid.
     * - Participants from `participants[]` array are rendered in a smaller grid.
     */
    interface RtkSpotlightGrid {
        /**
          * Aspect Ratio of participant tile  Format: `width:height`
         */
        "aspectRatio"?: string;
        /**
          * UI Config
         */
        "config"?: UIConfig;
        /**
          * Gap between participant tiles
         */
        "gap"?: number;
        /**
          * Grid size
         */
        "gridSize"?: GridSize1;
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack;
        /**
          * Grid Layout
         */
        "layout"?: GridLayout1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Participants
         */
        "participants"?: Peer[];
        /**
          * Pinned Participants
         */
        "pinnedParticipants"?: Peer[];
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface RtkSpotlightIndicator {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component used as a stage that commonly houses
     * the `grid` and `sidebar` components.
     */
    interface RtkStage {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkStageCustomEvent<States>) => void;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface RtkStageToggle {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Emits updated state data
         */
        "onRtkStateUpdate"?: (event: RtkStageToggleCustomEvent<States1>) => void;
        /**
          * Size
         */
        "size"?: Size1;
        /**
          * States
         */
        "states"?: States1;
        /**
          * Language
         */
        "t"?: RtkI18n1;
        /**
          * Variant
         */
        "variant"?: ControlBarVariant;
    }
    /**
     * A switch component which follows RTK Design System.
     */
    interface RtkSwitch {
        /**
          * Whether the switch is enabled/checked
         */
        "checked"?: boolean;
        /**
          * Whether switch is readonly
         */
        "disabled"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Event when switch value is changed
         */
        "onRtkChange"?: (event: RtkSwitchCustomEvent<boolean>) => void;
        /**
          * Whether switch is readonly
         */
        "readonly"?: boolean;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface RtkTabBar {
        /**
          * Active tab
         */
        "activeTab"?: Tab;
        /**
          * UI Config
         */
        "config"?: UIConfig;
        /**
          * Icon Pack
         */
        "iconPack"?: IconPack;
        /**
          * Grid Layout
         */
        "layout"?: GridLayout1;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Set active tab
         */
        "onTabChange"?: (event: RtkTabBarCustomEvent<Tab>) => void;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Tabs
         */
        "tabs"?: Tab[];
    }
    /**
     * A component which renders a text composer
     */
    interface RtkTextComposerView {
        /**
          * Disable the text input (default = false)
         */
        "disabled"?: boolean;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Keydown event handler function
         */
        "keyDownHandler"?: (e: KeyboardEvent) => void;
        /**
          * Max length for text input
         */
        "maxLength"?: number;
        /**
          * Event emitted when text changes
         */
        "onTextChange"?: (event: RtkTextComposerViewCustomEvent<string>) => void;
        /**
          * Placeholder text
         */
        "placeholder"?: string;
        /**
          * Boolean to indicate if rate limit is breached
         */
        "rateLimitBreached"?: boolean;
        /**
          * Language
         */
        "t"?: RtkI18n1;
        /**
          * Default value for text input
         */
        "value"?: string;
    }
    /**
     * A component which renders a text message from chat.
     */
    interface RtkTextMessage {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Whether the message is continued by same user
         */
        "isContinued"?: boolean;
        /**
          * Text message object
         */
        "message": TextMessage;
        /**
          * Date object of now, to calculate distance between dates
         */
        "now"?: Date;
        /**
          * show message in bubble
         */
        "showBubble"?: boolean;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    /**
     * A component which renders a text message from chat.
     */
    interface RtkTextMessageView {
        /**
          * Renders text as markdown (default = true)
         */
        "isMarkdown"?: boolean;
        /**
          * Text message
         */
        "text": string;
    }
    /**
     * Tooltip component which follows RTK Design System.
     */
    interface RtkTooltip {
        /**
          * Delay before showing the tooltip
         */
        "delay"?: number;
        /**
          * Disabled
         */
        "disabled"?: boolean;
        /**
          * Tooltip kind
         */
        "kind"?: TooltipKind;
        /**
          * Tooltip label
         */
        "label"?: string;
        /**
          * Event handler called when the open state of the tooltip changes.
         */
        "onRtkOpenChange"?: (event: RtkTooltipCustomEvent<boolean>) => void;
        /**
          * Open
         */
        "open"?: boolean;
        /**
          * Placement of menu
         */
        "placement"?: Placement;
        /**
          * Size
         */
        "size"?: Size;
        /**
          * Tooltip variant
         */
        "variant"?: TooltipVariant;
    }
    /**
     * A component which shows a transcript.
     * You need to remove the element after you receive the
     * `rtkTranscriptDismiss` event.
     */
    interface RtkTranscript {
        /**
          * Dismiss event
         */
        "onRtkTranscriptDismiss"?: (event: RtkTranscriptCustomEvent<{
    id: string;
    renderedId: string;
  }>) => void;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Message
         */
        "transcript": Transcript & { renderedId?: string };
    }
    /**
     * A component which handles transcripts.
     * You can configure which transcripts you want to see and which ones you want to hear.
     * There are also certain limits which you can set as well.
     */
    interface RtkTranscripts {
        /**
          * Config object
         */
        "config"?: UIConfig;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * States object
         */
        "states"?: States;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface RtkUiProvider {
        /**
          * Config
         */
        "config"?: UIConfig1;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack1;
        /**
          * Meeting
         */
        "meeting"?: Meeting | null;
        /**
          * Fill type
         */
        "mode"?: MeetingMode1;
        /**
          * Emits `rtkStatesUpdate` so that developers can listen to onRtkStatesUpdate and update their own stores Do not confuse this with `rtkStateUpdate` that other components emit
         */
        "onRtkStatesUpdate"?: (event: RtkUiProviderCustomEvent<States1>) => void;
        /**
          * Whether to show setup screen or not
         */
        "showSetupScreen"?: boolean;
        /**
          * Language utility
         */
        "t"?: RtkI18n1;
    }
    /**
     * A component which shows count of total joined participants in a meeting.
     */
    interface RtkViewerCount {
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Language
         */
        "t"?: RtkI18n;
        /**
          * Viewer count variant
         */
        "variant"?: ViewerCountVariant;
    }
    interface RtkVirtualizedParticipantList {
        /**
          * Buffer items to render before and after the visible area
         */
        "bufferedItemsCount"?: number;
        /**
          * Element to render if list is empty
         */
        "emptyListElement"?: HTMLElement;
        /**
          * Height of each item in pixels (assumed fixed)
         */
        "itemHeight"?: number;
        /**
          * Items to be virtualized
         */
        "items"?: Peer1[];
        /**
          * Function to render each item
         */
        "renderItem"?: (item: Peer1, index: number) => HTMLElement;
    }
    interface RtkWaitingScreen {
        /**
          * Config
         */
        "config"?: UIConfig;
        /**
          * Icon pack
         */
        "iconPack"?: IconPack;
        /**
          * Meeting object
         */
        "meeting"?: Meeting;
        /**
          * Language
         */
        "t"?: RtkI18n;
    }
    interface IntrinsicElements {
        "rtk-ai": RtkAi;
        "rtk-ai-toggle": RtkAiToggle;
        "rtk-ai-transcriptions": RtkAiTranscriptions;
        "rtk-audio-grid": RtkAudioGrid;
        "rtk-audio-tile": RtkAudioTile;
        "rtk-audio-visualizer": RtkAudioVisualizer;
        "rtk-avatar": RtkAvatar;
        "rtk-breakout-room-manager": RtkBreakoutRoomManager;
        "rtk-breakout-room-participants": RtkBreakoutRoomParticipants;
        "rtk-breakout-rooms-manager": RtkBreakoutRoomsManager;
        "rtk-breakout-rooms-toggle": RtkBreakoutRoomsToggle;
        "rtk-broadcast-message-modal": RtkBroadcastMessageModal;
        "rtk-button": RtkButton;
        "rtk-camera-selector": RtkCameraSelector;
        "rtk-camera-toggle": RtkCameraToggle;
        "rtk-caption-toggle": RtkCaptionToggle;
        "rtk-channel-creator": RtkChannelCreator;
        "rtk-channel-details": RtkChannelDetails;
        "rtk-channel-header": RtkChannelHeader;
        "rtk-channel-selector-ui": RtkChannelSelectorUi;
        "rtk-channel-selector-view": RtkChannelSelectorView;
        "rtk-chat": RtkChat;
        "rtk-chat-composer-ui": RtkChatComposerUi;
        "rtk-chat-composer-view": RtkChatComposerView;
        "rtk-chat-message": RtkChatMessage;
        "rtk-chat-messages-ui": RtkChatMessagesUi;
        "rtk-chat-messages-ui-paginated": RtkChatMessagesUiPaginated;
        "rtk-chat-search-results": RtkChatSearchResults;
        "rtk-chat-selector-ui": RtkChatSelectorUi;
        "rtk-chat-toggle": RtkChatToggle;
        "rtk-clock": RtkClock;
        "rtk-confirmation-modal": RtkConfirmationModal;
        "rtk-controlbar": RtkControlbar;
        "rtk-controlbar-button": RtkControlbarButton;
        "rtk-counter": RtkCounter;
        "rtk-debugger": RtkDebugger;
        "rtk-debugger-audio": RtkDebuggerAudio;
        "rtk-debugger-screenshare": RtkDebuggerScreenshare;
        "rtk-debugger-system": RtkDebuggerSystem;
        "rtk-debugger-toggle": RtkDebuggerToggle;
        "rtk-debugger-video": RtkDebuggerVideo;
        "rtk-dialog": RtkDialog;
        "rtk-dialog-manager": RtkDialogManager;
        "rtk-draft-attachment-view": RtkDraftAttachmentView;
        "rtk-emoji-picker": RtkEmojiPicker;
        "rtk-emoji-picker-button": RtkEmojiPickerButton;
        "rtk-ended-screen": RtkEndedScreen;
        "rtk-file-dropzone": RtkFileDropzone;
        "rtk-file-message": RtkFileMessage;
        "rtk-file-message-view": RtkFileMessageView;
        "rtk-file-picker-button": RtkFilePickerButton;
        "rtk-fullscreen-toggle": RtkFullscreenToggle;
        "rtk-grid": RtkGrid;
        "rtk-grid-pagination": RtkGridPagination;
        "rtk-header": RtkHeader;
        "rtk-icon": RtkIcon;
        "rtk-idle-screen": RtkIdleScreen;
        "rtk-image-message": RtkImageMessage;
        "rtk-image-message-view": RtkImageMessageView;
        "rtk-image-viewer": RtkImageViewer;
        "rtk-information-tooltip": RtkInformationTooltip;
        "rtk-join-stage": RtkJoinStage;
        "rtk-leave-button": RtkLeaveButton;
        "rtk-leave-meeting": RtkLeaveMeeting;
        "rtk-livestream-indicator": RtkLivestreamIndicator;
        "rtk-livestream-player": RtkLivestreamPlayer;
        "rtk-livestream-toggle": RtkLivestreamToggle;
        "rtk-logo": RtkLogo;
        "rtk-markdown-view": RtkMarkdownView;
        "rtk-meeting": RtkMeeting;
        "rtk-meeting-title": RtkMeetingTitle;
        "rtk-menu": RtkMenu;
        "rtk-menu-item": RtkMenuItem;
        "rtk-menu-list": RtkMenuList;
        "rtk-message-list-view": RtkMessageListView;
        "rtk-message-view": RtkMessageView;
        "rtk-mic-toggle": RtkMicToggle;
        "rtk-microphone-selector": RtkMicrophoneSelector;
        "rtk-mixed-grid": RtkMixedGrid;
        "rtk-more-toggle": RtkMoreToggle;
        "rtk-mute-all-button": RtkMuteAllButton;
        "rtk-mute-all-confirmation": RtkMuteAllConfirmation;
        "rtk-name-tag": RtkNameTag;
        "rtk-network-indicator": RtkNetworkIndicator;
        "rtk-notification": RtkNotification;
        "rtk-notifications": RtkNotifications;
        "rtk-overlay-modal": RtkOverlayModal;
        "rtk-paginated-list": RtkPaginatedList;
        "rtk-participant": RtkParticipant;
        "rtk-participant-count": RtkParticipantCount;
        "rtk-participant-setup": RtkParticipantSetup;
        "rtk-participant-tile": RtkParticipantTile;
        "rtk-participants": RtkParticipants;
        "rtk-participants-audio": RtkParticipantsAudio;
        "rtk-participants-stage-list": RtkParticipantsStageList;
        "rtk-participants-stage-queue": RtkParticipantsStageQueue;
        "rtk-participants-toggle": RtkParticipantsToggle;
        "rtk-participants-viewer-list": RtkParticipantsViewerList;
        "rtk-participants-waiting-list": RtkParticipantsWaitingList;
        "rtk-permissions-message": RtkPermissionsMessage;
        "rtk-pip-toggle": RtkPipToggle;
        "rtk-plugin-main": RtkPluginMain;
        "rtk-plugins": RtkPlugins;
        "rtk-plugins-toggle": RtkPluginsToggle;
        "rtk-poll": RtkPoll;
        "rtk-poll-form": RtkPollForm;
        "rtk-polls": RtkPolls;
        "rtk-polls-toggle": RtkPollsToggle;
        "rtk-recording-indicator": RtkRecordingIndicator;
        "rtk-recording-toggle": RtkRecordingToggle;
        "rtk-screen-share-toggle": RtkScreenShareToggle;
        "rtk-screenshare-view": RtkScreenshareView;
        "rtk-settings": RtkSettings;
        "rtk-settings-audio": RtkSettingsAudio;
        "rtk-settings-toggle": RtkSettingsToggle;
        "rtk-settings-video": RtkSettingsVideo;
        "rtk-setup-screen": RtkSetupScreen;
        "rtk-sidebar": RtkSidebar;
        "rtk-sidebar-ui": RtkSidebarUi;
        "rtk-simple-grid": RtkSimpleGrid;
        "rtk-speaker-selector": RtkSpeakerSelector;
        "rtk-spinner": RtkSpinner;
        "rtk-spotlight-grid": RtkSpotlightGrid;
        "rtk-spotlight-indicator": RtkSpotlightIndicator;
        "rtk-stage": RtkStage;
        "rtk-stage-toggle": RtkStageToggle;
        "rtk-switch": RtkSwitch;
        "rtk-tab-bar": RtkTabBar;
        "rtk-text-composer-view": RtkTextComposerView;
        "rtk-text-message": RtkTextMessage;
        "rtk-text-message-view": RtkTextMessageView;
        "rtk-tooltip": RtkTooltip;
        "rtk-transcript": RtkTranscript;
        "rtk-transcripts": RtkTranscripts;
        "rtk-ui-provider": RtkUiProvider;
        "rtk-viewer-count": RtkViewerCount;
        "rtk-virtualized-participant-list": RtkVirtualizedParticipantList;
        "rtk-waiting-screen": RtkWaitingScreen;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "rtk-ai": LocalJSX.RtkAi & JSXBase.HTMLAttributes<HTMLRtkAiElement>;
            "rtk-ai-toggle": LocalJSX.RtkAiToggle & JSXBase.HTMLAttributes<HTMLRtkAiToggleElement>;
            "rtk-ai-transcriptions": LocalJSX.RtkAiTranscriptions & JSXBase.HTMLAttributes<HTMLRtkAiTranscriptionsElement>;
            "rtk-audio-grid": LocalJSX.RtkAudioGrid & JSXBase.HTMLAttributes<HTMLRtkAudioGridElement>;
            "rtk-audio-tile": LocalJSX.RtkAudioTile & JSXBase.HTMLAttributes<HTMLRtkAudioTileElement>;
            /**
             * An audio visualizer component which visualizes a participants audio.
             * Commonly used inside `rtk-name-tag`.
             */
            "rtk-audio-visualizer": LocalJSX.RtkAudioVisualizer & JSXBase.HTMLAttributes<HTMLRtkAudioVisualizerElement>;
            /**
             * Avatar component which renders a participant's image or their initials.
             */
            "rtk-avatar": LocalJSX.RtkAvatar & JSXBase.HTMLAttributes<HTMLRtkAvatarElement>;
            "rtk-breakout-room-manager": LocalJSX.RtkBreakoutRoomManager & JSXBase.HTMLAttributes<HTMLRtkBreakoutRoomManagerElement>;
            /**
             * A component which lists all participants, with ability to
             * run privileged actions on each participant according to your permissions.
             */
            "rtk-breakout-room-participants": LocalJSX.RtkBreakoutRoomParticipants & JSXBase.HTMLAttributes<HTMLRtkBreakoutRoomParticipantsElement>;
            "rtk-breakout-rooms-manager": LocalJSX.RtkBreakoutRoomsManager & JSXBase.HTMLAttributes<HTMLRtkBreakoutRoomsManagerElement>;
            /**
             * A button which toggles visibility of breakout rooms.
             * You need to pass the `meeting` object to it.
             */
            "rtk-breakout-rooms-toggle": LocalJSX.RtkBreakoutRoomsToggle & JSXBase.HTMLAttributes<HTMLRtkBreakoutRoomsToggleElement>;
            "rtk-broadcast-message-modal": LocalJSX.RtkBroadcastMessageModal & JSXBase.HTMLAttributes<HTMLRtkBroadcastMessageModalElement>;
            /**
             * A button that follows RTK Design System.
             */
            "rtk-button": LocalJSX.RtkButton & JSXBase.HTMLAttributes<HTMLRtkButtonElement>;
            /**
             * A component which lets to manage your audio devices and audio preferences.
             * Emits `rtkStateUpdate` event with data for muting notification sounds:
             * ```ts
             * {
             *  prefs: {
             *    muteNotificationSounds: boolean
             *  }
             * }
             * ```
             */
            "rtk-camera-selector": LocalJSX.RtkCameraSelector & JSXBase.HTMLAttributes<HTMLRtkCameraSelectorElement>;
            /**
             * A button which toggles your camera.
             */
            "rtk-camera-toggle": LocalJSX.RtkCameraToggle & JSXBase.HTMLAttributes<HTMLRtkCameraToggleElement>;
            "rtk-caption-toggle": LocalJSX.RtkCaptionToggle & JSXBase.HTMLAttributes<HTMLRtkCaptionToggleElement>;
            "rtk-channel-creator": LocalJSX.RtkChannelCreator & JSXBase.HTMLAttributes<HTMLRtkChannelCreatorElement>;
            "rtk-channel-details": LocalJSX.RtkChannelDetails & JSXBase.HTMLAttributes<HTMLRtkChannelDetailsElement>;
            "rtk-channel-header": LocalJSX.RtkChannelHeader & JSXBase.HTMLAttributes<HTMLRtkChannelHeaderElement>;
            "rtk-channel-selector-ui": LocalJSX.RtkChannelSelectorUi & JSXBase.HTMLAttributes<HTMLRtkChannelSelectorUiElement>;
            "rtk-channel-selector-view": LocalJSX.RtkChannelSelectorView & JSXBase.HTMLAttributes<HTMLRtkChannelSelectorViewElement>;
            /**
             * Fully featured chat component with image & file upload, emoji picker and auto-scroll.
             */
            "rtk-chat": LocalJSX.RtkChat & JSXBase.HTMLAttributes<HTMLRtkChatElement>;
            "rtk-chat-composer-ui": LocalJSX.RtkChatComposerUi & JSXBase.HTMLAttributes<HTMLRtkChatComposerUiElement>;
            /**
             * A component which renders a chat composer
             */
            "rtk-chat-composer-view": LocalJSX.RtkChatComposerView & JSXBase.HTMLAttributes<HTMLRtkChatComposerViewElement>;
            "rtk-chat-message": LocalJSX.RtkChatMessage & JSXBase.HTMLAttributes<HTMLRtkChatMessageElement>;
            "rtk-chat-messages-ui": LocalJSX.RtkChatMessagesUi & JSXBase.HTMLAttributes<HTMLRtkChatMessagesUiElement>;
            "rtk-chat-messages-ui-paginated": LocalJSX.RtkChatMessagesUiPaginated & JSXBase.HTMLAttributes<HTMLRtkChatMessagesUiPaginatedElement>;
            "rtk-chat-search-results": LocalJSX.RtkChatSearchResults & JSXBase.HTMLAttributes<HTMLRtkChatSearchResultsElement>;
            "rtk-chat-selector-ui": LocalJSX.RtkChatSelectorUi & JSXBase.HTMLAttributes<HTMLRtkChatSelectorUiElement>;
            /**
             * A button which toggles visibility of chat.
             * You need to pass the `meeting` object to it to see the unread messages count badge.
             * When clicked it emits a `rtkStateUpdate` event with the data:
             * ```ts
             * { activeSidebar: boolean; sidebar: 'chat' }
             * ```
             */
            "rtk-chat-toggle": LocalJSX.RtkChatToggle & JSXBase.HTMLAttributes<HTMLRtkChatToggleElement>;
            /**
             * Shows the time elapsed in a meeting.
             */
            "rtk-clock": LocalJSX.RtkClock & JSXBase.HTMLAttributes<HTMLRtkClockElement>;
            /**
             * A confirmation modal.
             */
            "rtk-confirmation-modal": LocalJSX.RtkConfirmationModal & JSXBase.HTMLAttributes<HTMLRtkConfirmationModalElement>;
            /**
             * Controlbar component provides you with various designs as variants.
             */
            "rtk-controlbar": LocalJSX.RtkControlbar & JSXBase.HTMLAttributes<HTMLRtkControlbarElement>;
            /**
             * A skeleton component used for composing custom controlbar buttons.
             */
            "rtk-controlbar-button": LocalJSX.RtkControlbarButton & JSXBase.HTMLAttributes<HTMLRtkControlbarButtonElement>;
            /**
             * A number picker with increment and decrement buttons.
             */
            "rtk-counter": LocalJSX.RtkCounter & JSXBase.HTMLAttributes<HTMLRtkCounterElement>;
            /**
             * A troubleshooting component to identify and fix any issues in the meeting.
             */
            "rtk-debugger": LocalJSX.RtkDebugger & JSXBase.HTMLAttributes<HTMLRtkDebuggerElement>;
            "rtk-debugger-audio": LocalJSX.RtkDebuggerAudio & JSXBase.HTMLAttributes<HTMLRtkDebuggerAudioElement>;
            "rtk-debugger-screenshare": LocalJSX.RtkDebuggerScreenshare & JSXBase.HTMLAttributes<HTMLRtkDebuggerScreenshareElement>;
            "rtk-debugger-system": LocalJSX.RtkDebuggerSystem & JSXBase.HTMLAttributes<HTMLRtkDebuggerSystemElement>;
            "rtk-debugger-toggle": LocalJSX.RtkDebuggerToggle & JSXBase.HTMLAttributes<HTMLRtkDebuggerToggleElement>;
            "rtk-debugger-video": LocalJSX.RtkDebuggerVideo & JSXBase.HTMLAttributes<HTMLRtkDebuggerVideoElement>;
            /**
             * A dialog component.
             */
            "rtk-dialog": LocalJSX.RtkDialog & JSXBase.HTMLAttributes<HTMLRtkDialogElement>;
            /**
             * A component which handles all dialog elements in a component such as:
             * - rtk-settings
             * - rtk-leave-meeting
             * - rtk-permissions-message
             * - rtk-image-viewer
             * - rtk-breakout-rooms-manager
             * This components depends on the values from `states` object.
             */
            "rtk-dialog-manager": LocalJSX.RtkDialogManager & JSXBase.HTMLAttributes<HTMLRtkDialogManagerElement>;
            /**
             * A component which renders the draft attachment to send
             */
            "rtk-draft-attachment-view": LocalJSX.RtkDraftAttachmentView & JSXBase.HTMLAttributes<HTMLRtkDraftAttachmentViewElement>;
            /**
             * A very simple emoji picker component.
             */
            "rtk-emoji-picker": LocalJSX.RtkEmojiPicker & JSXBase.HTMLAttributes<HTMLRtkEmojiPickerElement>;
            "rtk-emoji-picker-button": LocalJSX.RtkEmojiPickerButton & JSXBase.HTMLAttributes<HTMLRtkEmojiPickerButtonElement>;
            /**
             * A screen which shows a meeting has ended.
             */
            "rtk-ended-screen": LocalJSX.RtkEndedScreen & JSXBase.HTMLAttributes<HTMLRtkEndedScreenElement>;
            "rtk-file-dropzone": LocalJSX.RtkFileDropzone & JSXBase.HTMLAttributes<HTMLRtkFileDropzoneElement>;
            /**
             * A component which renders a file message from chat.
             */
            "rtk-file-message": LocalJSX.RtkFileMessage & JSXBase.HTMLAttributes<HTMLRtkFileMessageElement>;
            /**
             * A component which renders a file message.
             */
            "rtk-file-message-view": LocalJSX.RtkFileMessageView & JSXBase.HTMLAttributes<HTMLRtkFileMessageViewElement>;
            "rtk-file-picker-button": LocalJSX.RtkFilePickerButton & JSXBase.HTMLAttributes<HTMLRtkFilePickerButtonElement>;
            /**
             * A button which toggles full screen mode for any
             * existing `rtk-meeting` component in the DOM.
             */
            "rtk-fullscreen-toggle": LocalJSX.RtkFullscreenToggle & JSXBase.HTMLAttributes<HTMLRtkFullscreenToggleElement>;
            /**
             * The main grid component which abstracts all the grid handling logic and renders it for you.
             */
            "rtk-grid": LocalJSX.RtkGrid & JSXBase.HTMLAttributes<HTMLRtkGridElement>;
            /**
             * A component which allows you to change current page and view mode
             * of active participants list. This is reflected in the `rtk-grid` component.
             */
            "rtk-grid-pagination": LocalJSX.RtkGridPagination & JSXBase.HTMLAttributes<HTMLRtkGridPaginationElement>;
            /**
             * A component that houses all the header components.
             */
            "rtk-header": LocalJSX.RtkHeader & JSXBase.HTMLAttributes<HTMLRtkHeaderElement>;
            /**
             * An icon component which accepts an svg string and renders it.
             */
            "rtk-icon": LocalJSX.RtkIcon & JSXBase.HTMLAttributes<HTMLRtkIconElement>;
            /**
             * A screen that handles the idle state,
             * i.e; when you are waiting for data about the meeting, specifically the `meeting` object.
             */
            "rtk-idle-screen": LocalJSX.RtkIdleScreen & JSXBase.HTMLAttributes<HTMLRtkIdleScreenElement>;
            /**
             * A component which renders an image message from chat.
             */
            "rtk-image-message": LocalJSX.RtkImageMessage & JSXBase.HTMLAttributes<HTMLRtkImageMessageElement>;
            /**
             * A component which renders an image message.
             */
            "rtk-image-message-view": LocalJSX.RtkImageMessageView & JSXBase.HTMLAttributes<HTMLRtkImageMessageViewElement>;
            /**
             * A component which shows an image sent via chat.
             */
            "rtk-image-viewer": LocalJSX.RtkImageViewer & JSXBase.HTMLAttributes<HTMLRtkImageViewerElement>;
            "rtk-information-tooltip": LocalJSX.RtkInformationTooltip & JSXBase.HTMLAttributes<HTMLRtkInformationTooltipElement>;
            "rtk-join-stage": LocalJSX.RtkJoinStage & JSXBase.HTMLAttributes<HTMLRtkJoinStageElement>;
            /**
             * A button which toggles visilibility of the leave confirmation dialog.
             */
            "rtk-leave-button": LocalJSX.RtkLeaveButton & JSXBase.HTMLAttributes<HTMLRtkLeaveButtonElement>;
            /**
             * A component which allows you to leave a meeting or
             * end meeting for all, if you have the permission.
             */
            "rtk-leave-meeting": LocalJSX.RtkLeaveMeeting & JSXBase.HTMLAttributes<HTMLRtkLeaveMeetingElement>;
            "rtk-livestream-indicator": LocalJSX.RtkLivestreamIndicator & JSXBase.HTMLAttributes<HTMLRtkLivestreamIndicatorElement>;
            "rtk-livestream-player": LocalJSX.RtkLivestreamPlayer & JSXBase.HTMLAttributes<HTMLRtkLivestreamPlayerElement>;
            "rtk-livestream-toggle": LocalJSX.RtkLivestreamToggle & JSXBase.HTMLAttributes<HTMLRtkLivestreamToggleElement>;
            /**
             * A component which loads the logo from your config, or via the `logo-url` attribute.
             */
            "rtk-logo": LocalJSX.RtkLogo & JSXBase.HTMLAttributes<HTMLRtkLogoElement>;
            "rtk-markdown-view": LocalJSX.RtkMarkdownView & JSXBase.HTMLAttributes<HTMLRtkMarkdownViewElement>;
            /**
             * A single component which renders an entire meeting UI.
             * It loads your preset and renders the UI based on it.
             * With this component, you don't have to handle all the states,
             * dialogs and other smaller bits of managing the application.
             */
            "rtk-meeting": LocalJSX.RtkMeeting & JSXBase.HTMLAttributes<HTMLRtkMeetingElement>;
            /**
             * Displays the title of the meeting.
             */
            "rtk-meeting-title": LocalJSX.RtkMeetingTitle & JSXBase.HTMLAttributes<HTMLRtkMeetingTitleElement>;
            /**
             * A menu component.
             */
            "rtk-menu": LocalJSX.RtkMenu & JSXBase.HTMLAttributes<HTMLRtkMenuElement>;
            /**
             * A menu item component.
             */
            "rtk-menu-item": LocalJSX.RtkMenuItem & JSXBase.HTMLAttributes<HTMLRtkMenuItemElement>;
            /**
             * A menu list component.
             */
            "rtk-menu-list": LocalJSX.RtkMenuList & JSXBase.HTMLAttributes<HTMLRtkMenuListElement>;
            /**
             * A component which renders list of messages.
             */
            "rtk-message-list-view": LocalJSX.RtkMessageListView & JSXBase.HTMLAttributes<HTMLRtkMessageListViewElement>;
            "rtk-message-view": LocalJSX.RtkMessageView & JSXBase.HTMLAttributes<HTMLRtkMessageViewElement>;
            /**
             * A button which toggles your microphone.
             */
            "rtk-mic-toggle": LocalJSX.RtkMicToggle & JSXBase.HTMLAttributes<HTMLRtkMicToggleElement>;
            /**
             * A component which lets to manage your audio devices and audio preferences.
             * Emits `rtkStateUpdate` event with data for muting notification sounds:
             * ```ts
             * {
             *  prefs: {
             *    muteNotificationSounds: boolean
             *  }
             * }
             * ```
             */
            "rtk-microphone-selector": LocalJSX.RtkMicrophoneSelector & JSXBase.HTMLAttributes<HTMLRtkMicrophoneSelectorElement>;
            /**
             * A grid component which handles screenshares, plugins and participants.
             */
            "rtk-mixed-grid": LocalJSX.RtkMixedGrid & JSXBase.HTMLAttributes<HTMLRtkMixedGridElement>;
            /**
             * A button which toggles visibility of a more menu.
             * When clicked it emits a `rtkStateUpdate` event with the data:
             * ```ts
             * { activeMoreMenu: boolean; }
             * ```
             */
            "rtk-more-toggle": LocalJSX.RtkMoreToggle & JSXBase.HTMLAttributes<HTMLRtkMoreToggleElement>;
            "rtk-mute-all-button": LocalJSX.RtkMuteAllButton & JSXBase.HTMLAttributes<HTMLRtkMuteAllButtonElement>;
            "rtk-mute-all-confirmation": LocalJSX.RtkMuteAllConfirmation & JSXBase.HTMLAttributes<HTMLRtkMuteAllConfirmationElement>;
            /**
             * A component which shows a participant's name.
             */
            "rtk-name-tag": LocalJSX.RtkNameTag & JSXBase.HTMLAttributes<HTMLRtkNameTagElement>;
            "rtk-network-indicator": LocalJSX.RtkNetworkIndicator & JSXBase.HTMLAttributes<HTMLRtkNetworkIndicatorElement>;
            /**
             * A component which shows a notification.
             * You need to remove the element after you receive the
             * `rtkNotificationDismiss` event.
             */
            "rtk-notification": LocalJSX.RtkNotification & JSXBase.HTMLAttributes<HTMLRtkNotificationElement>;
            /**
             * A component which handles notifications.
             * You can configure which notifications you want to see and which ones you want to hear.
             * There are also certain limits which you can set as well.
             */
            "rtk-notifications": LocalJSX.RtkNotifications & JSXBase.HTMLAttributes<HTMLRtkNotificationsElement>;
            /**
             * A confirmation modal.
             */
            "rtk-overlay-modal": LocalJSX.RtkOverlayModal & JSXBase.HTMLAttributes<HTMLRtkOverlayModalElement>;
            "rtk-paginated-list": LocalJSX.RtkPaginatedList & JSXBase.HTMLAttributes<HTMLRtkPaginatedListElement>;
            /**
             * A participant entry component used inside `rtk-participants` which shows data like:
             * name, picture and media device status.
             * You can perform privileged actions on the participant too.
             */
            "rtk-participant": LocalJSX.RtkParticipant & JSXBase.HTMLAttributes<HTMLRtkParticipantElement>;
            /**
             * A component which shows count of total joined participants in a meeting.
             */
            "rtk-participant-count": LocalJSX.RtkParticipantCount & JSXBase.HTMLAttributes<HTMLRtkParticipantCountElement>;
            "rtk-participant-setup": LocalJSX.RtkParticipantSetup & JSXBase.HTMLAttributes<HTMLRtkParticipantSetupElement>;
            /**
             * A component which plays a participants video and allows for placement
             * of components like `rtk-name-tag`, `rtk-audio-visualizer` or any other component.
             */
            "rtk-participant-tile": LocalJSX.RtkParticipantTile & JSXBase.HTMLAttributes<HTMLRtkParticipantTileElement>;
            /**
             * A component which lists all participants, with ability to
             * run privileged actions on each participant according to your permissions.
             */
            "rtk-participants": LocalJSX.RtkParticipants & JSXBase.HTMLAttributes<HTMLRtkParticipantsElement>;
            /**
             * A component which plays all the audio from participants and screenshares.
             */
            "rtk-participants-audio": LocalJSX.RtkParticipantsAudio & JSXBase.HTMLAttributes<HTMLRtkParticipantsAudioElement>;
            /**
             * A component which lists all participants, with ability to
             * run privileged actions on each participant according to your permissions.
             */
            "rtk-participants-stage-list": LocalJSX.RtkParticipantsStageList & JSXBase.HTMLAttributes<HTMLRtkParticipantsStageListElement>;
            "rtk-participants-stage-queue": LocalJSX.RtkParticipantsStageQueue & JSXBase.HTMLAttributes<HTMLRtkParticipantsStageQueueElement>;
            /**
             * A button which toggles visibility of participants.
             * When clicked it emits a `rtkStateUpdate` event with the data:
             * ```ts
             * { activeSidebar: boolean; sidebar: 'participants' }
             * ```
             */
            "rtk-participants-toggle": LocalJSX.RtkParticipantsToggle & JSXBase.HTMLAttributes<HTMLRtkParticipantsToggleElement>;
            "rtk-participants-viewer-list": LocalJSX.RtkParticipantsViewerList & JSXBase.HTMLAttributes<HTMLRtkParticipantsViewerListElement>;
            "rtk-participants-waiting-list": LocalJSX.RtkParticipantsWaitingList & JSXBase.HTMLAttributes<HTMLRtkParticipantsWaitingListElement>;
            /**
             * A component which shows permission related troubleshooting
             * information.
             */
            "rtk-permissions-message": LocalJSX.RtkPermissionsMessage & JSXBase.HTMLAttributes<HTMLRtkPermissionsMessageElement>;
            "rtk-pip-toggle": LocalJSX.RtkPipToggle & JSXBase.HTMLAttributes<HTMLRtkPipToggleElement>;
            /**
             * A component which loads a plugin.
             */
            "rtk-plugin-main": LocalJSX.RtkPluginMain & JSXBase.HTMLAttributes<HTMLRtkPluginMainElement>;
            /**
             * A component which lists all available plugins from their preset,
             * and ability to enable or disable plugins.
             */
            "rtk-plugins": LocalJSX.RtkPlugins & JSXBase.HTMLAttributes<HTMLRtkPluginsElement>;
            /**
             * A button which toggles visibility of plugins.
             * When clicked it emits a `rtkStateUpdate` event with the data:
             * ```ts
             * { activeSidebar: boolean; sidebar: 'plugins' }
             * ```
             */
            "rtk-plugins-toggle": LocalJSX.RtkPluginsToggle & JSXBase.HTMLAttributes<HTMLRtkPluginsToggleElement>;
            /**
             * A poll component.
             * Shows a poll where a user can vote.
             */
            "rtk-poll": LocalJSX.RtkPoll & JSXBase.HTMLAttributes<HTMLRtkPollElement>;
            /**
             * A component that lets you create a poll.
             */
            "rtk-poll-form": LocalJSX.RtkPollForm & JSXBase.HTMLAttributes<HTMLRtkPollFormElement>;
            /**
             * A component which lists all available plugins a user can access with
             * the ability to enable or disable them as per their permissions.
             */
            "rtk-polls": LocalJSX.RtkPolls & JSXBase.HTMLAttributes<HTMLRtkPollsElement>;
            /**
             * A button which toggles visibility of polls.
             * You need to pass the `meeting` object to it to see the unread polls count badge.
             * When clicked it emits a `rtkStateUpdate` event with the data:
             * ```ts
             * { activeSidebar: boolean; sidebar: 'polls' }
             * ```
             */
            "rtk-polls-toggle": LocalJSX.RtkPollsToggle & JSXBase.HTMLAttributes<HTMLRtkPollsToggleElement>;
            /**
             * A component which indicates the recording status of a meeting.
             * It will not render anything if no recording is taking place.
             */
            "rtk-recording-indicator": LocalJSX.RtkRecordingIndicator & JSXBase.HTMLAttributes<HTMLRtkRecordingIndicatorElement>;
            /**
             * A button which toggles recording state of a meeting.
             * Only a privileged user can perform this action,
             * thus the button will not be visible for participants
             * who don't have the permission to record a meeting.
             */
            "rtk-recording-toggle": LocalJSX.RtkRecordingToggle & JSXBase.HTMLAttributes<HTMLRtkRecordingToggleElement>;
            /**
             * A button which toggles your screenshare.
             */
            "rtk-screen-share-toggle": LocalJSX.RtkScreenShareToggle & JSXBase.HTMLAttributes<HTMLRtkScreenShareToggleElement>;
            /**
             * A component which plays a participant's screenshared video.
             * It also allows for placement of other components similar to `rtk-participant-tile`.
             * This component will not render anything if the participant hasn't start screensharing.
             */
            "rtk-screenshare-view": LocalJSX.RtkScreenshareView & JSXBase.HTMLAttributes<HTMLRtkScreenshareViewElement>;
            /**
             * A settings component to see and change your audio/video devices
             * as well as see your connection quality.
             */
            "rtk-settings": LocalJSX.RtkSettings & JSXBase.HTMLAttributes<HTMLRtkSettingsElement>;
            /**
             * A component which lets to manage your audio devices and audio preferences.
             * Emits `rtkStateUpdate` event with data for muting notification sounds:
             * ```ts
             * {
             *  prefs: {
             *    muteNotificationSounds: boolean
             *  }
             * }
             * ```
             */
            "rtk-settings-audio": LocalJSX.RtkSettingsAudio & JSXBase.HTMLAttributes<HTMLRtkSettingsAudioElement>;
            /**
             * A button which toggles visibility of settings module.
             * When clicked it emits a `rtkStateUpdate` event with the data:
             * ```ts
             * { activeSettings: boolean; }
             * ```
             */
            "rtk-settings-toggle": LocalJSX.RtkSettingsToggle & JSXBase.HTMLAttributes<HTMLRtkSettingsToggleElement>;
            /**
             * A component which lets to manage your camera devices and your video preferences.
             * Emits `rtkStateUpdate` event with data for toggling mirroring of self video:
             * ```ts
             * {
             *  prefs: {
             *    mirrorVideo: boolean
             *  }
             * }
             * ```
             */
            "rtk-settings-video": LocalJSX.RtkSettingsVideo & JSXBase.HTMLAttributes<HTMLRtkSettingsVideoElement>;
            /**
             * A screen shown before joining the meeting, where you can edit your display name,
             * and media settings.
             */
            "rtk-setup-screen": LocalJSX.RtkSetupScreen & JSXBase.HTMLAttributes<HTMLRtkSetupScreenElement>;
            /**
             * A component which handles the sidebar and
             * you can customize which sections you want, and which section you want as the default.
             */
            "rtk-sidebar": LocalJSX.RtkSidebar & JSXBase.HTMLAttributes<HTMLRtkSidebarElement>;
            "rtk-sidebar-ui": LocalJSX.RtkSidebarUi & JSXBase.HTMLAttributes<HTMLRtkSidebarUiElement>;
            /**
             * A grid component which renders only the participants in a simple grid.
             */
            "rtk-simple-grid": LocalJSX.RtkSimpleGrid & JSXBase.HTMLAttributes<HTMLRtkSimpleGridElement>;
            /**
             * A component which lets to manage your audio devices and audio preferences.
             * Emits `rtkStateUpdate` event with data for muting notification sounds:
             * ```ts
             * {
             *  prefs: {
             *    muteNotificationSounds: boolean
             *  }
             * }
             * ```
             */
            "rtk-speaker-selector": LocalJSX.RtkSpeakerSelector & JSXBase.HTMLAttributes<HTMLRtkSpeakerSelectorElement>;
            /**
             * A component which shows an animating spinner.
             */
            "rtk-spinner": LocalJSX.RtkSpinner & JSXBase.HTMLAttributes<HTMLRtkSpinnerElement>;
            /**
             * A grid component that renders two lists of participants: `pinnedParticipants` and `participants`.
             * You can customize the layout to a `column` view, by default is is `row`.
             * - Participants from `pinnedParticipants[]` are rendered inside a larger grid.
             * - Participants from `participants[]` array are rendered in a smaller grid.
             */
            "rtk-spotlight-grid": LocalJSX.RtkSpotlightGrid & JSXBase.HTMLAttributes<HTMLRtkSpotlightGridElement>;
            "rtk-spotlight-indicator": LocalJSX.RtkSpotlightIndicator & JSXBase.HTMLAttributes<HTMLRtkSpotlightIndicatorElement>;
            /**
             * A component used as a stage that commonly houses
             * the `grid` and `sidebar` components.
             */
            "rtk-stage": LocalJSX.RtkStage & JSXBase.HTMLAttributes<HTMLRtkStageElement>;
            "rtk-stage-toggle": LocalJSX.RtkStageToggle & JSXBase.HTMLAttributes<HTMLRtkStageToggleElement>;
            /**
             * A switch component which follows RTK Design System.
             */
            "rtk-switch": LocalJSX.RtkSwitch & JSXBase.HTMLAttributes<HTMLRtkSwitchElement>;
            "rtk-tab-bar": LocalJSX.RtkTabBar & JSXBase.HTMLAttributes<HTMLRtkTabBarElement>;
            /**
             * A component which renders a text composer
             */
            "rtk-text-composer-view": LocalJSX.RtkTextComposerView & JSXBase.HTMLAttributes<HTMLRtkTextComposerViewElement>;
            /**
             * A component which renders a text message from chat.
             */
            "rtk-text-message": LocalJSX.RtkTextMessage & JSXBase.HTMLAttributes<HTMLRtkTextMessageElement>;
            /**
             * A component which renders a text message from chat.
             */
            "rtk-text-message-view": LocalJSX.RtkTextMessageView & JSXBase.HTMLAttributes<HTMLRtkTextMessageViewElement>;
            /**
             * Tooltip component which follows RTK Design System.
             */
            "rtk-tooltip": LocalJSX.RtkTooltip & JSXBase.HTMLAttributes<HTMLRtkTooltipElement>;
            /**
             * A component which shows a transcript.
             * You need to remove the element after you receive the
             * `rtkTranscriptDismiss` event.
             */
            "rtk-transcript": LocalJSX.RtkTranscript & JSXBase.HTMLAttributes<HTMLRtkTranscriptElement>;
            /**
             * A component which handles transcripts.
             * You can configure which transcripts you want to see and which ones you want to hear.
             * There are also certain limits which you can set as well.
             */
            "rtk-transcripts": LocalJSX.RtkTranscripts & JSXBase.HTMLAttributes<HTMLRtkTranscriptsElement>;
            "rtk-ui-provider": LocalJSX.RtkUiProvider & JSXBase.HTMLAttributes<HTMLRtkUiProviderElement>;
            /**
             * A component which shows count of total joined participants in a meeting.
             */
            "rtk-viewer-count": LocalJSX.RtkViewerCount & JSXBase.HTMLAttributes<HTMLRtkViewerCountElement>;
            "rtk-virtualized-participant-list": LocalJSX.RtkVirtualizedParticipantList & JSXBase.HTMLAttributes<HTMLRtkVirtualizedParticipantListElement>;
            "rtk-waiting-screen": LocalJSX.RtkWaitingScreen & JSXBase.HTMLAttributes<HTMLRtkWaitingScreenElement>;
        }
    }
}
